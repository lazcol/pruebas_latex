%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: prba_pstricks.dvi
%%CreationDate: Sat May  9 23:24:18 2020
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMMI10 SFTT1000 SFRM1000
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/local/bin/dvips -o prba_pstricks.ps
%+ prba_pstricks.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.05.09:2024
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.03 2020/01/09
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 }
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the line coefficents Ax+By+C=0
%% x1 y1 x2 y2 -> A B C
/LineCoefABC {
  0 index 3 index sub % A=y2-y1
  4 index 3 index sub % B=x1-x2
  3 index 5 index mul 6 index 4 index mul sub % C=x2y1-x1y2
  7 3 roll pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% calculate the 2-order determinant
%% |a11 a12|
%% |a21 a22|
%% a11 a12, a21 a22 -> X
/DeterminantTwo {
  4 1 roll mul 3 1 roll mul exch sub
} def
%% calculate the 3-order determinant
%% |a11 a12 a13|
%% |a21 a22 a23|
%% |a31 a32 a33|
%%   8   7   6    5   4   3    2   1   0
%% a11 a12 a13, a21 a22 a23, a31 a32 a33 -> X
/DeterminantThree {
  % |a22 a23, a32 a33| * (-1)^(1+1)a11
  8 index abs 1E-5 lt { %a11=0
    0
  } {
    4 index 4 index 3 index 3 index DeterminantTwo
    9 index mul
  } ifelse
  % |a12 a13, a32 a33| * (-1)^(1+2)a21
  6 index abs 1E-5 lt { %a12=0
    0 sub
  } {
    8 index 8 index 4 index 4 index DeterminantTwo
    7 index mul sub
  } ifelse
  % |a12 a13, a22 a23| * (-1)^(1+3)a31
  3 index abs 1E-5 lt { %a13=0
    0 add
  } {
    8 index 8 index 7 index 7 index DeterminantTwo
    4 index mul add
  } ifelse
  10 1 roll pop pop pop pop pop pop pop pop pop
} def
%% calculate the 4-order determinant
%% |a11 a12 a13 a14|
%% |a21 a22 a23 a24|
%% |a31 a32 a33 a34|
%% |a41 a42 a43 a44|
%%  15  14  13  12   11  10   9   8    7   6   5   4    3   2   1   0
%% a11 a12 a13 a14, a21 a22 a23 a24, a31 a32 a33 a34, a41 a42 a43 a44 -> X
/DeterminantFour {
  % |a22 a23 a24, a32 a33 a34, a42 a43 a44| * (-1)^(1+1)a11
  15 index abs 1E-5 lt { %a11=0
    0
  } {
    10 index 10 index 10 index 9 index 9 index 9 index 8 index 8 index 8 index DeterminantThree
    16 index mul
  } ifelse
  % |a12 a13 a14, a32 a33 a34, a42 a43 a44| * (-1)^(1+2)a21
  12 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    15 index 15 index 15 index 10 index 10 index 10 index 9 index 9 index 9 index DeterminantThree
    13 index mul sub
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a42 a43 a44| * (-1)^(1+3)a31
  8 index abs 1E-5 lt { %a31=0
    0 add
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 9 index 9 index 9 index DeterminantThree
    9 index mul add
  } ifelse
  % |a12 a13 a14, a22 a23 a24, a32 a33 a34| * (-1)^(1+4)a41
  4 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    15 index 15 index 15 index 14 index 14 index 14 index 13 index 13 index 13 index DeterminantThree
    5 index mul sub
  } ifelse
  17 1 roll pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop
} def
%% calculate the 5-order determinant
%% |a11 a12 a13 a14 a15|
%% |a21 a22 a23 a24 a25|
%% |a31 a32 a33 a34 a35|
%% |a41 a42 a43 a44 a45|
%% |a51 a52 a53 a54 a55|
%%  24  23  22  21  20   19  18  17  16  15   14  13  12  11  10    9   8   7   6   5    4   3   2   1   0
%% a11 a12 a13 a14 a15, a21 a22 a23 a24 a25, a31 a32 a33 a34 a35, a41 a42 a43 a44 a45, a51 a52 a53 a54 a55-> X
/DeterminantFive {
  % |a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+1)a11
  24 index abs 1E-5 lt { %a11=0
    0
  } {
    18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index 15 index 15 index 15 index 15 index DeterminantFour
    25 index mul
  } ifelse
  % |a12 a13 a14 a15, a32 a33 a34 a35, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+2)a21
  20 index abs 1E-5 lt { %a21=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 18 index 18 index 18 index 18 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    21 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a42 a43 a44 a45, a52 a53 a54 a55| * (-1)^(1+3)a31
  15 index abs 1E-5 lt { %a31=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 17 index 17 index 17 index 17 index 16 index 16 index 16 index 16 index DeterminantFour
    16 index mul add
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a52 a53 a54 a55| * (-1)^(1+4)a41
  10 index abs 1E-5 lt { %a41=0
    0 sub
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 16 index 16 index 16 index 16 index DeterminantFour
    11 index mul sub
  } ifelse
  % |a12 a13 a14 a15, a22 a23 a24 a25, a32 a33 a34 a35, a42 a43 a44 a45| * (-1)^(1+5)a51
  5 index abs 1E-5 lt { %a51=0
    0 add
  } {
    24 index 24 index 24 index 24 index 23 index 23 index 23 index 23 index 22 index 22 index 22 index 22 index 21 index 21 index 21 index 21 index DeterminantFour
    6 index mul add
  } ifelse
  26 1 roll pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop pop pop pop pop pop
  pop pop pop pop pop
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: SFRM1000
%!FontType1-1.0: SFRM1000 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1000, tcrm1000, larm1000, lbrm1000, lcrm1000, rxrm1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-189 -321 1456 937}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F267FE330B57DF626EBF73D2779A4A6B462AE6E5
19E5878939A488F2FE1094A76925CD24DAD4573AD3CF34E426708CF06E7EBFFC
BEF5595408106E2189F418D17AD510ED5B6A528E8902AA3A5F0FF52AE3DEAB07
32F06B63E28BB88229E046F4FF8A356BBDDE82DF2A197F2E26CA00D5594725A1
83A89A36487EAAE1AC312C929CDCE50722FA6C596C261E4D78D6C6ABF77F5CCE
0E410ED74287A0F201140F8D9674A7AC585D3CBC72CCB824F9E1CEBD08AEDB3A
A4015CADF471F7ABD9B0F0AF73A8274FD441BC1988A61799856E4770155341D6
516CD0E25BFA59B67AB7E0571DF3F5BA70AB52137D9E6A79EFADBE70CA05AC8D
991D0895C8FFC747FBC0E9A7212BAE6560B9E2B64FFCC58112E64A3B4CF7ECF7
595F51C34AD1342F5678FE1E62EC5A389CF04E82B5F832914B91F921F30A7E32
CA3919F57A2D9DE844CAAAC0DC751C255C9916595E8C9532E7A0A84A0AEFCACD
83EDE059FD06EEE9951473180B517F25F609F347DBA012AE9F004DC3C771777B
BE812787C3C50315D67254A384EB65F260943C6E16B2CDC64E15EEEDC67C5544
8ADE9981A6867405E46222CACCEF79F9DC8674268BBBE1EFEC2187A75FB7FBF8
CB2DB2134848DEA2F9CED443DCF561E7272B38F830871B2A5196A787924EF556
4B7E9093ADD414ACBC10147944D216D35011830CDA336A7A2F11AADC42948AFC
2A806FCCDF6E10175677535AB193ADCC13B34B86F061878D79B5BD236FB5BB43
2D6B7B739EAAF07B14FD159018685C3780BDE05EF14AA63B1271FD59CAE2BC87
98E1B1951322D326947C8657B04D9BF2D550511EF456D139738F39745530E923
528C48A6E954D3379D5F7A940AECD4E70D57234A71AD13F049ABC369539682FB
986E048CBE764A02C5E7374E3A9827459C1CFF111329C3EF94B80D8395862560
53424BE22E3DFD06EB1C96DF96E89760BB92CAEB07F19F265B86AC274316F36A
E7D0F35DC01D6748054072C8367097B9635431CCB6CB95B93FBDC51B23927339
38C86FD833ABC8DA3E8C8D731180A25987809D35ADB8FB7FEBEA10C44453A637
D6718DE009FA716F609FA0915AD563EBA964035A5C772EF157B644A0D587D997
20A686D1F7E9A6626325476C0393B41C518D57CA60DD0104C30F1657EA5EAA3B
E56A6DBD05C6D38FEF1A11
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFTT1000
%!FontType1-1.0: SFTT1000 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ectt1000, tctt1000, latt1000, lbtt1000, lctt1000, rxtt1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Typewriter) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch true def
/Weight (Medium) def
end readonly def
/FontName /SFTT1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-208 -360 1374 838}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA1B1ED6A435B5950D131BC48179F5BE3191944DD
8626DE76AAFD8EC4DC8241F2ED33E10698DC7741D6E45CF5A02FC6D2068AA205
EF3C4FDCDE803F4D1D4FF03A079CD4FC4BAB3C558A8FDDF53D34AABB7D89E4E0
CF76F77ECE57575C27718A8074CE275DDE4AD245220A8236400BE47BC76DE13A
9EDA4BD5744C71DB407BCA39DBC9D857122A1DA969E6D0915FDC1622AB8BB88A
93D2EE72E9A2FA73193D6CDF254252980674DB644EEB36A2036E04DB649F816E
E70C4C43E88609C8E8B8B84A920CA933FA00F41F2FC3C867825E2AC658FA0F7F
331323E22BD193A0A8009B3F0EE6D55281CF1076F1631FE509E79941FF08D0B7
ACFEE566C76FBC09F3B4AA57959D4EFC34413ADB46292ED99CC8EC4436DE2CAB
86B8B48847353E826F5346762CD5D353727DBB502E08B934DAE4E99894706BCA
DC35AA52C8610137C7E336009D564831E1E7936600CC3891D3A58A539523329A
45DD54B8D76F43582CE621F74FE7F8FB06E32612FB06B66CBB3096C0DD63D097
08C206A620CCC9ECB49CDC17295CD0B3C9D2DFCAACE46137490589D72A6A57BD
FE97C0CCB9087CF31EAA7860444C0D2A1B230F1879B1CD80CED3863680AE37F7
39A117963BCA696B1EFA8EA500DF5B1C5F6F42EA16D46CC0687DC684B2AE28CA
8511448362E82092B10FE7451F92E7798EB30D015614C10FAE46C0A4D32FCB0C
6BAB88710E429820C597271F5ABF0D001D837D04F7DAFD12E2E3E14A5D6A62F3
27A102A2D235520B22E90390172C479E98418A0D659DA46431137085B59AA611
233042AFA7CE671A231C00755B2090EAE0B6E67A05EF66353972C232A17C555C
A15A5ACEA1F8AEBCAD32A5DE6ABAC1A2B9F68B0FB2B04A5D002635771456A885
0C4906DA5A96C2EC5EFF288CC22CA0D995EF0722B978B52BBDB729D4F897E737
0C4679B096318FF65F192BB465D4B28FD78BAF3AB21678BAA5AECECFB6EF2B8F
5C1F6DBCE36E6313C32A4C728BC84C955AADF23F2C763CB339B5547BD1FB64BC
EA0E9538A6DAF6921C5F3881436FF74C1D2DA79EF543508330853A42A2512CF4
BDE155F7118DABA2710058926158D7179D08392FB590D91A9A334C7A0252273D
12E93E9BFF27EF0108342D68B5C88DA27B2A196D1680787FBAA3043842D5E8D7
09D13BE9F7D4292AB27FDD13ADBB9214184F53A25939ED58A375C6B24AB76815
CD83B5639199A68B3D7575BD95466C15C69817A611C490CA4A7628C2257AA084
F83F5DED18D9BE931E819EB6177E6889AA017F2ECCC26A80223DAE6F2B4E6292
59B2A280439AF75932BBF6A5C4C13473C8A479CE8AB6CFE5FF69257E42AA6F9C
CB67CE1D684B8EE042A0DFDE5F67ACB933B4C82FC4538263CD6180CDC03DDB28
80A95C04C4F8108FB9A89B45C068ED203724FCC05E319A50916425C308D02F63
DA25848551454614AF83486A34CEE46E1FACB5DB6255EB11CF42880ECCB4EDD3
A6E842DAA661FD9B397A3F26BEA912693B0A2E1B36DE6E357F911C7F03FED1DA
B28BB99A57DD4EA546F8EEB0DD871AE36D2AFCC4A55CF81BCB8031D291D5F75A
3A1ACEE2C1E8D76584C32A7059E8DB896279E7AE6D25E81034C170CA7E61C62B
A2ED8164362ACDAC5DD9692B890757DD74E27F696B442C31F0BEC519652AFB0F
145E00AF29A5213CDDEF22E1DE92C7FE932325DFDDA18D698FDC2932E9D0E61B
740C2414522243F8942DC98340DBF93E48790D4025E339F8A7ACA13BCDBD10CD
7BDBFA7E97845ECF8EF3B6A3D13C4691B5C0A89731944DCA0993CE33FC4F48C6
D181E139C5C9617EC85B0149324F506C84F26B62003FFCA51DB3FCC6D7723CA8
6EC455FECC5B3729341CF5D74891C295A4F0FF4700AB0A2C8EFB3D5D3297720F
EC65254242DF50BB4F2A69229CC39C8F087A72A9715F6076AB21332AD088DB29
77AA675CF294334355C2EFCCA828D59D85992FEAD42CAF4D91EAC21545815DD4
9583EB7FE74864545F979282A54E58F149C2EEB2970B37FB5A2F90A57149A835
B02533C338049F26BDCBA08BEC57BEBCCF128F34591EA974D380750404774E0B
19F8E058F51CC2AFFAA40AB22494D08EB379D8CB6206ADCCE107A624033BADF6
D86FC17A30DD6D4236326E6DC3A046FF00D80D3B96BAD65985A4C93BB4D66150
CC20D94E2CACFE7B0C2F5FA4150713F6FF5A943CE82CB1857A9B8E1B0842CA8C
E511975D6DF8B1DBBAC85A8C373E00DA7F4B100C6CD4466FB09C83123094DDCC
81333957BF5AD353944DAAE92656BFD9FF6C32289274B455E87562C58A0F7739
F1A395E36FD23735A9CCAC02327C1428D478B2CDA05FD350DB066AD380471D52
712B846F6E784DBBF01924BC2D7187CD112D3ACD5C7CEC3AC2C8F19BCB9D0E53
EFC739D751DCCA9A4CCCB636F9CA857B3BEEEBCC23C1C78142B90F3153331686
98A10F2493559DC0CCF452B1A7E86610EC87F2DBA4296190A164EF8942B5A6D9
C1CCB2079328489503CE4AEE23CBA57153F85738BBC0569B52F812390BC29E70
AC3872FF04437F2F53418A4A6EC36147841FCFAC527C14F9DBD135F73FCF408F
1199E124C92B5C7CE0FAC02DBDAB88E34AB38324177752345BF694F806612DDB
459733371D366F6E252435A2F4A39F785395668130D77D222D4427DDAF25B2CF
72E1EC79A99A8AFA59B5B96B911CD7BAFF119EF9D00ADF04E86B1797B6F81CB0
76D4861E89ABE13B9874F39BD444ACF028E491BDE0985545128BE3879BF4EDA2
E7250CAD2FFB6AFCADF079CD1B8D9EB331CD0C7DAFAFADFCD8265F128A67C372
720840A20C25E8A0C7BF44EB8CC1328B778B0AAFA4AC3E7934AB8E09F6E413D0
28AEB72126F83FF84F15022F6B16187EAA6B23D44BACBF755EC54AEB8C0EE218
AA8828365FA8D0E21ED1C80F69170257C0566EA3CF270B1475849FF83B1380B2
90054C7918121DC99F7609372170A19CB1975BB90C59DBBAF1B1FEC48D4A2E5A
4C6D38DB1A06112EB251E08434CD1FB81B8961F030D2CA99962D5FF3180162D2
5EB096A30EA1BE19E1A0CB2353495C0945D0987108A3779C5147483F5E46B23F
2EFECCCF270CD3627F462489F20E18CC4DDB0863C58F00DABB609F455F23B7ED
90F772BF239C387A4ACBDB9EA5A5484D4BFB94C297F9E2BC85DE0DD56D5F596C
B2275D1B0C65004551AA5F388A18D13626692FA02FE7E5F6474EE58EC31B946C
41CF80911826F482DFCDCB78A67C18271C5711A59D248BAB65900182933882E8
A20C99D5DC6EFF38D2448D8EAAA4088783D6314F7F165D62AC570F0DE23E1063
BD783CCDA519B1B3997620BB2E9ED1626C04C9066EDE29EB3DB1CBA45D305B1A
9162D40B28D8FA46D2F862CC94CE8222B46D6478202BAFF37B9C64801D47F41B
372BD5E117C2665FB96C8D5ADCE25EF353CF57EEA6F6FCEF0FA787F9B6E6F84E
B5E37D8B699879C32CCF86087143AD2D7FAC1CDE35D092D1B709A3A18DBBD06A
5246DF09348B6BBE755599AA8F8BA15DE5277152A92D9B134E62A3E9F6C9E1B4
D14DCD6AD90FA663758A7CC5FDC0C1DED57A1885D1F64F329A0303E63D119B01
6C1640790CE640672DB6EF24E11ECBAF10682F0EE1A0A113029217F66286B4D8
CCD808C3CB9B92D2B2638C01027C6C5713E1EE1646D773CC4FE563B2DBD22E04
5A3EFAD242E0E029EAA738F5B50954BF1AFA48CCECC38970464F63E2AC5951E5
3554E020E54C300F30BF572FF87B02402EC5D14C6D6F457B27AB65FB6F4D4972
1ACD83B5639199A68B3D7575BD95466FA250643BAFFC5724C4BF2116006762D5
12F167AE4B0D5034C19E3965CC759617E70BF8FA0B231144BDD184042CBB203B
9400CC727F76EB29C2C671044AA55FB02F823B2F3A3FFB13AA2F3BE2B6165CF9
88C08B011216771E488D766749A40E7E8247757063E132B3D0FB35EAED6C8DA8
3A763EE0F5092E01188760305A4B3CB8D7F11F2977EA82C86E92D3FE6EA48E07
AD46302A9DAC0C40AD4D9F2C4F31D9BEFFDD2806081D3006CF322CD5B0B9DF66
43B869260246FD78C82B8FB3BD89CCE7478BA71BAE752A259BC950C87EBC38CC
B3023CA8994808ACC2B41BED1AE20157B06C16B14A0A561D0BEBF002BFA0B00A
FFC37A5CFEF09D1E9910A33BCC14C66E4185D6237427829751C8A05112A3BEA6
F147B729D21F809903705BE9CF0FA1E09CBAC45A595D19EE15E663AE76BACEC7
094C2572E5CE25B4B457ABE252DF4C9BC1D95FD0DC5CDE379CFAA434168464FB
37E8F70BEC0031E8C7819C16F9818B9EF5C5033D4DD30D21DA12FC7B594D0E99
B5689C875412DF9BC9153EE2B300E8C944848EA6901ADA961EC384CC30562124
A15BFE8B206165534EE364E9572636BC97E2B4D1B82FD0AA1BD8A123A5C24601
22756E1BC5B0F17FCD9C94BA558EEE26BC446F968D159872E9A32E907AF35421
D00B090A9C6DC9A7FA5FAE2A7DA827CD4DE92D89F549D7C9959A0017FC01C9E9
91A9ECF17446F9C870D2748EF97203C88CF9077E7E1ABBC4E7C64BA8F67F4B2E
4F96C272850928D915ED9C6D091E405D03B7580E481F45ECA10E46A7C7E0B883
975D99A4FDAD93169AA3C54334200BA9EC952EC2A4C264F268BB2EEDE43591E2
831E30CD486DB389526B0192B441B9648DDCB870A8B40F2307902784AD3A127E
741953E8A2CD6011C6CE751011390BED73EE7BF69170CFC63B0CC95B3504ABCD
BB04D58967809E3E186CDC0480C83ECC6698F4EAC23B50A1FCD29D293269F2B2
2532C617DEC6A7DAFD44C995CDCDD730688A090EF225F2D1798E2DCFCA9A20A6
DB1B9E0DB13DF1000F36D15D428C080069E05CCA8F4613491AB14E6BB73F491C
99FAA795A6341E63F8E3BC936787F848B873A726FE5DA64D146F238198F20755
54EBA131CBC2A756A01A7EF594C4322E4F5B637B7477BDD5F36C83334EEFACBB
E95760C8820138032946EDD761F5EFEF43C4933AEDBF2B6DB8070A4F3EBE2116
D50CB7FFF2F5E84BE60422FC0A97D8914BE66361F75486D31E9656BFC60CD543
C96380CC5FD12E123AAC1F8833BB78C3FFAD3540FBA36F93A115F697F9E39BA6
925BCE4FE4A96A8CFF5084AE0E66F0970A4099F55529BB528DA9EEA5C4C071F3
33BFC723D1BC30EAF5F56A28265875ED54F352D66D136B8FAE2765FBED18D82E
F32BD53EBFC797DCC473D81C52A2330979E00A6DB2040327E83554A4BEA77E9C
442AC6D14247F45D74A0C9B8A990E075D26F7C7F9187B69F15DDE7B3A9E18999
C51001E528FA58EA6BEBDF5ECF8D5AA73EBABF8EE1EFACFBAEC60722B55CF317
82D8B1AE42BB04685A3C539F5F1051460362D21EAE7A9ED4B5921A5C4B2B0B87
86052C5E84EDE500BCA93E164AF5E65E9945C14429080355989A965556712E34
1F567F7ACCA5E0C493157D0C0CD55C2139862E744155CC80DF74B1EBD3125C0F
9F1D1094E29D5FBFDCD9081478D1C737B95BC6DCEB56B6203243078B5DB66390
BD981E4801D8B181EE2A3B1B5F7DD26D32D224F70466ADCA85FACE360E70EC30
D128B5C6F563D1FB7AEE2827BFF1ECB2674EC311B9A2CDDD2F4032E1A54FA2D3
47B10ECA38157972C9A1269BFE3F40ECF9EA8C3E161F5285F9B4E47DECF583B5
C46ED8E45CE3B88EF4E0131BBB42EEB954D4E3626D69771EA7238BBC09F3067A
7AAF77234D187A037FD10DED216F17BDECE340243AD5D449CA34CDE85261C506
6DA7AC334A8A478E0366A1650573F588E3FA0BE9C711926103606247E509FA2E
46ABD5D84F0B692670F2ACCA99724FC578D2CDABEAB1A821D2E63C602FC06FF2
D8D83D4C34ECC23791AC98EF2D52D9EEC7DDFA7DA801418D4E3BC350CC68E261
FA07D7F2126E7F4603D36FF5D512C5E6EC689DE88C2BE4B3EE620BD005E924C7
49D1B7D493E5434F138939F43EDB9735192FB90BC7C04C65371AEC794641BF90
0704EB611D8B560F4708D51DF9F8CB63D7C315586D18C2C0A5E6BB6F91132223
FD13FBD7DB8C5E797DA82F52B75B6788931A5E6F302F0BFC326B16EC1A43A5E9
E3BCA7DA354C8D64FC6F72474F67043F86B76D289CC2073A6C55FBD67620B5D4
DD456EA44E3CED2440AD42A5E82C62BC5744BF73647CA37F4022617B120CB7F7
A9D222BF883890232B150AB17C20C458A3783C16E70A220D2ED867A3C279A978
8F27823CE16637088D40105A0C3CFA470D0EDE28AF00700A4657E975B281609A
BF39473A1897D9E0EF6933B10C9F7CE2061853F5980E7CEDD2468472481CDF0C
045911287A371B528396DCD6F25F79DB414EF33897D167B3D3312638879F4A10
EBF89944E595E666F1FE814FC2525F7D398D360D6B42D07E36884BF8BC83DCEA
810908F75EE8A56B78CBD4C77AEC45656384C054CF8FFA6C61531D54F1C74FBD
85C09C4E1370FC23D7699F1F85B33BA10659F8EDACCF7936399E611D1066A9D8
C620BDC0F22D5DCAB19AF6D119C14CD62094C9962A3DFA5F439C61722D5B5588
FC544430740A4DD90C52DA56A2427474C3F504504F4176FA1B87EECFBD114D21
E359C35EF11EFB70147CAEF216A5A790D1B23C889833A9E1EB54BFF8C9AE5A3F
3F92D7EBC50A0BAD01CC41FA5A63D8B71443792F9C774ACC9589BC88FC4F8329
A38145BBB5DA43979B5A135402C14674BD7990E473A800C03E0409D8C56211C6
D28804202421039E14B7EF03927ADD585F2DA9A2438D806D57C4F0B4C145FC7A
03C8A0F37E52292DCBE567071E2513D94ED70D9A99A6BA1291706A691B7BC6EB
8FC227BAD040C666BB145EEED4DAC3900DEB535A10B6E3F946158B49AD0B83FE
1E2E4133CEB0ADE8277EA13F7F7FE0FB41B994AD131029C4A51B6917D9EBFDC6
1E60DABD11312427F462E1B086D65991E2FEC3DC70352A2BA5099C8A058E705D
FC6FDE441A7BE3AC172D12AE96F24C114704C62901112C2196C827C61087213E
01D080AEDEDAC57E19249396DD49571C06A72FF834818FD7B9E42B228DED1B4A
C2439F579F0DA17A615C392268DBACCE1DBB10CA9629D6C055A6EE59350A7A08
E04B4380D944E6568EF1704E6CA60D1774E48FABF725C5032AE3846F4DEAFCB5
888117010CBA8CCB9F8869029925BAD6B32C5EA6A2413C105FADA298E1EBADD3
57B30BCE49F1BB6372B4553585D71151E749A6A8D05345834180C7C968D4EAE0
EBDDEBD3A9A09C3F19FAE2F54045EADAF14E5188E8E41BE6221BF928C800235E
38CDA069251A0CE2690804F3B1C6F91230E8CF1CC32D55B8458C47B69A25B077
7AC47E3E02CFEC9EA4E5E056BBD4A19D34B3F0C8586FE1D897A0A78C62854F4C
062E1435B0BA36639F0C60AE2F9DC7220EC8D8854C85CB053934CBE11F8DAE38
BC4EF0E6634198310891849D932E55F14F300E83C3BE63E6A064E9064DDBA73D
4AD905C502EEA2329C92189968FB27677F0332CF42BD692F27D25F3ACFF0F4F9
4BF545126C0DBACB48C3233C1C65C9B8211CA8E1F6A7E49BD7AE2C424487F796
55D92248B51611EE0DDE21E26BBC66A4FFFD1F68A5290D95E8EEF785808871C6
4BF427B4DB733D82C6579E3D1E967CF4711285D38B3AEFB10B47A3FD4FDEAE62
D927296DD0437B84A77DE3F8D1CFC7725D52551BAF3D2187685FC2B67971606C
0723F88CABE40E8AE0C7573B65B2BFD99F2DADD5AD8283DC9CD1C81B9028B079
0BDE37884CE1332894BBFED0BA2BEDDDBE9107C2C395F5E7BD6884B791DB3666
340F04070C1F54EA913E9D74C011E179E121197050ADE47988D66A38BCA0E82A
AD046CFA2CC45B2A64794D9F118085017213511E529A61AAF8CBB8B8EE5F0FD5
9D0CECCFE5FACBF5FA6F6EE86919E2F5527D647AAD38A5102ECCDB8736CDCEC8
53DD25DE12B074F746778AADA0979B620F84259EED33A67AE0E44452438863D5
88B306950873D9E44B0BC68D1813852C5D5FA5E86A17A41E7C90BBD33CF33DAF
8A4BC2C999DA93F9BB680943E7D8959DDC3BB9ABA911D19232028E2D8E66914F
73AB097CD004B12E0026B2E89FCE9456CD84896253A3C59BE4B93F44B1B4356F
5C41DF1187E86BE4501C0E3AB5C797CF5324B234B7AD11899B24774D8799B931
1731A3132949665568DF45E747C9679A034F88C0B766273F21ECE4CF533954D8
4EE268759B9A9CC17CA6CC66EC1EB8714956F1D86DACDA93E7DB66C9BB07EEE8
B93048DA6AE3131FC9786647D584035A523CAA4D35DF13D08BFC799038D1CAED
ECB60C4B87E346826034D47C94F21491FC191896A757AA061479354D59A3241E
AAF7E7C32A957B8B1194C2EB7FF3E44C24A3F74A2746E8A3A1AF66DA4E88A6FD
04C4D1AA9ACBD47090D64C6073AB236B700BE1F25A65582B0EB85F11EC79D045
221F54FC43213910A96654B94E2248DBC10CD7454636E97E399A786AC90E5E04
1218015BFDCB12783BF1258D051D338259F0860FC065DD42F6C1CBCA7B9221E4
E106C8D6F14893E06EFA0F579F88BEEAAF213A97B28DC97E550E475C4970EECB
E2BD4A750D8B4E2B185314F8AFB20A779182DD18912FD7D3646552A788EE6EDC
EF59D9146728D18F9E8BDEA2E1B1D3F803194EA60619B6C98B91EA4D6BC2F863
BB5A323B1039C673E9EBED25D298931214021930AA94C1CBF0D296E34D669BF5
48EC241A29596C747EB3DB62E30C842589D89A115F399E1B1A3217D275BD27B6
4126F927CBE82858E0BC3EAC0027AE67892C8CD4AA408452E13FEBB7A566B441
D4D0EFEC7D6505E477B2BCB11CBF0A27FFEE1B6DE181D826EA00D47E340582F7
B243AE844B777E28EEF2F7893E7C9EC7A2540B737DFEA623B507CB022F028F23
3B011D3233222F1F99A6D6407CB065008FF04A9641E9D176466B3B911FE933CD
7D3D2C7AC2D5BDDB2548C632E5B389CD69E8157A86D7A280DEF90FC98E50BF31
63B8E6823E07FF4788F8D84CE7EBDE3F4C37A509E24533DA78807B1EDAC16AD0
7D89A1910D15EE5CBCA7E3423B5DBE38006BE1DE13C6A837B12C4CB8D969B268
0AB4046FF4E50ABC4AAFF34B845C005021D3676AD9C9740033956BE1DBFB4DB6
0AF26D40E6BC6EEF9A904D72B54996BA56AC348BB978688E9BCCEFAB806AC323
4606234C2C813D8B6999A63A0D74C27AB2C43B27E2893D1DE74E53F646496D90
81F1AC50E6BA5FEB4E37092E152719E2A4D7C07D7F20DBE231C94C68EB610AF6
7292F6754EDA86BB9834EC8566246DD5FC059ED9B1800A27F3F60A5A30E09D92
5EDE0A7A54321C9CB5060AE750D8BDAB17C7A633909BC4F51848BFE16F198482
DB89D4C0967D8DA0C0985244A5D8F4D17E524C96C5CBF2A8053108EEA894C634
CE5856080FB347E8D6C1E69C54CBB223F05F1BAFAAE6AB8DD58516F542915758
067E8A6B1EFC1874B51663414484DCCDB8ECCB78A6897BDF07BBAC1D01797960
2FDC9902453A315A4A20D4ED362706DC46F7F8DB4C21971B6404C9145894BD1E
328A19B910CB179532594E2736306D82A887EF4B294D85BFCAC4EC7DBEECED1D
7D53FADC5E8A10AEE46860883F757ADB576C0F8F856AB33CFF1F58ABAB62D71E
665C44A40106216BF883D7097717D07A139EE76D616C62D15514A4B6857738CA
9C54F44F4C5F8E12D8B8032CA82FF68B0557801E41BD95E41C04BE6375EA17CB
526814A1C5C2E7B9BA528C4F3391412B49ED251C550EF94E603D88211C30EF67
EA0CA90AC3D4350A1D2629A0BF31DBDEB006EE1A20C3D3B0FD14719BD5B35E6A
7F30486DDAFE77492914514DAA2B91215C83515637F0A5F17D7FB87BFAA3AFBD
EA3EA32C44C1B4681B0D71395E5E9AFA5542A527039E14B7EF03927ADD585F2D
A9A242D95013570AFC25B6EE02F3A53DFCE348FCE986D1C4971FF04991D44FF6
BAE1E0064AC263E7D1D9AD1755A171630EA0D1DA71F7A23E55A8B92FDE66E53C
984301FB4F90C3579B911DF7322BC94221E3103AC9539C2E4AF04EFE5857AC71
33CF9073F795F8C1C20A76E62A7582CC3DF28B28C7190BCA2E23A617C059BB58
F863BDB83FA0DC7E2E9374C7F88AB07B2371AEA86708FA99651EA4E9489A23DA
C367C7C1AF6D1A0844AD12B1F8B19BBC9D7B5CFEA2E0BBD439107FB3778DCC02
43B48F10CD9CBB9D1D1606744A28C46B942F12EBA198E779647145E6B54844DE
10CC28B8D7FEFC4C645040540CD85D2F9B8EFA161B56479F4B2C9F6A2FA7C43F
180084F4CA909E51811AB88EA5B505B5F326EAE05723B1248E6CBF747E291579
6DED6C71AFA533B3C4BBFE15B913A83809DADFF49076A9CAEFD6021E95672E29
0117C783D9E9C2A0FF8550D1B87079EB85B024C740B0ACCD07CC7434A5CA181F
14238FB896D5153A204F1AFD467B4557357A5191BE5CA1D9175BE506A7EDA19F
F235A1B1D92C9048EBA403A4A599B626C8AB85A613667F1F0B59E2122B1FE3A8
98E5A21F6C1D5BC4454F1FD5F0C91F2F50E19CCC297D02CBF73271E728532DC8
03294869B690F4931887387A2932066154A93B87A253E4DCA467633981828FF1
6EDB1F54CF02B7DF830BBFD6032037E7C1480C22DD61FA45C9D6AD9C4DE8EEAB
753429A9D8A19DAB8D640AF00072C465538C0AADC9469135DAB945E2144AF4BA
7A0E29338F92AE67446452BA50DFEBB3440E2E67859520ACFA11E9E26E867DEF
D268E21171A96CBB2C0A46E4211725382A28319378A3BE835A961298A9522DCE
06F0EC9B516775E4DF7BBF124DCD505020A6A86E554A2C8688CC0397D050F0A2
418FA74941DD8BE4F8D348A63862399C265011A5EE53295494C6537C806DE93E
5D88DAE112CB8F8B6686EAB4B8288CEA7C77C83EE8960904B7CBB3F06B733261
40172594A8DAF57749A925E0B0AA1DA08267593C84A702ADA16DC7532F7D0F9B
6D88580ED38377FF33E1FB1F743CA709E942A62844220A3F9572E2A90BF14432
FF118C1A01AF7B91578BBF991E948F1E6AE64A59E3663D3B4CDBF3E8DC4D7CD5
BAFCB4FF2204E623A02FFA5021B67B0F3DD5A7B6777F3F729F352BE940B4B329
FB463D8BDF85467D1734872892733958AC9CFD389FE5EEBBC3D06AE71A9AF35B
B0C43821F042E47E1728BB722A1A0309DC2C1CFA6831E1F156556D47D9FACF46
99F4FC6B3FFE84E6220D5F948A313C0FEDF07E1CCFFEE1C28EFDB4157F7E7F3F
AF94C1DC01B39401D74A8028E1B2BC67DCFC6AD2DAEC4140AC4E1D05D13201C7
5DFB142D13285E87CC401FBE1AB553BADDE82D88C8C0DE4ED8F7853E887FAAA5
6927BE11B289C8D1A4272FCF11967B114D185DEB4D44248116C879D09B847173
0DD73DDCAFDD96490D651504BD8B5A27FCF80A9310ACD691C1BF1D1D5C8EC183
2ABA67DE1250E46AF13A236BA11607EC857EEB2729CCCA2D4EAC8FD83165A970
206C1F349572A1CEC2CE2E79403B3EC3157374BF7C8FC7C9DB23E160159D52D2
8606969DFE4266D66AA743F9DE2A18520919F96124E3D447C641D4061430D58A
4EC2C73FCF04322659FE0432DB3A680BD47429CCE03E37E18FEB60FD35550469
F4584D9684F502CF675AB58A59FBBA2855AA62E260D893C887BC471DC668D510
66B57715E44AC54B45CD261DD7CE8723654616BF83BDA50EDE185006C84DB8D3
3E4E20D768D61CB47F91282EDAF74BA4E78D52DA4A440FD11D2A69856DE6AE5A
10F666492E81D87DCD7843842B2B78886F81116873B9AE578A26918A0DC8FB6A
37971A1C0987F4BAD842922794D6B6F9B0619E2FFE2721B88C11EF4365478D26
C2CA02F5060997B3CEDA92D7FAAA23331BD1EF89C9956DF4F0118B300D1B6D20
927C4E0FA464D36872E6EA404D05E3C44D290BF0EDB79B2486FA693D8EA3E501
7C451B039203FF8F8A194DF5F4DA3D811E3B6A9E5D5C9C612B74052E166E2640
72B572A62E148080CFCFB0A28D3851129093D4363E5D0A84FCD14A03B0A7FEC9
C75DF8F39FB84B82423431C85F088A6338A70CC714AC2D98DE543DC5F2C8F14C
C69C8279B1B71728E12C225F69FD2204E623A02FFA5021B67B0F3DD5A7B23FEE
E42DD66C421E35F936C2D0011A2B141D0059287A3A4BBD8FDA7111358F429EE7
A63D02B6BD90283630BF0BD422AB9AFFE9B6D59049B95DA04FFEA2884D315F56
52B8A526A2FAF0601684615541A927BC72A094B8F4A133A9C0661DFB09370239
122D06EC41C31193F41312B267B4BBD96830A112FC956449FD5BDB057D05D161
50E4A8F7922B353F03E8B8BFAA8A9C9653D2EC568760732577B4247E32DE6905
244A51EDF2A7B0EA00FA5D88F4B8BCAC4070E7C2A9F04C4B7E0A843BDF0EFFF5
469250FF6C1483C4559EDDFB5FFF2C2FBC2287D254802EBC92CC9330CBF9C173
8FC0BE8A602CC5424CBACCAA7A812A82FF41C82D3BF46FCA0AE67C01F98B23A9
BD9391A41A2E05424B735BDFEE87EB3769A7422D11CE5166AE50E83A29592B9F
9A5ACC2905C9DA0DE4997C5A7CF6789A449D7D8DD713BA1357618AFDBAC7A28F
F2C551E141024DA319FBB9BC38114416C15FFE8C37D19152F9B99F98DD697B9D
D91F772B15B3B9D5A37888D74ED4FD87AD3E871A811552CC7B72E43E34639C24
8A2A6CE3368227350E33E05FDDC56731E5396C4284C094AD1947C8187FDDC200
19E76A7776F493C20036CCC91179644474ABEC0C1485B886279A0ABFFCFA1B5E
005CE04190A053616A96EE33CA9DDBB6106307D092DCC56A27845A96A5EAC069
3CF5C6E7C1BD6A0E937F68F0D0044C4AC6EB75616404C07814F63BE65C283848
64A5BFB4ED3B0BECE87FD510F9DC5A88AB633C1FFEAB1D0617C44B7CF6E0261C
0526EE475BF2EE12174C7CD6963509ADF1C9D06E2F27F82D2B856EB27BBC2BCD
35F8B57E4D6E997493DD1F3D2EE51F9E26C5710C2693C14D4DEF2BD97F4E938B
9198F7FF47199EBCCE1B7FD992FBD133884248593DFE91A020793E66AAC88E94
BA7025DECAE9C370586399D648F19909A74AD696B5921645E54D9F9E2E1A1F76
0498C875EFE45AF5627AB9042269F6109E69D1B3A6E102072954E2490763E190
FA8FE95129C323DF11487F4DA7D3E17AE9BE77FAF74DEED2AB2F397D00360AE5
447482F8AA8DAF25D74A55449E7387966C100B066343E45D28AD18B5E9154718
7BBAF1714CC4CF05A5F079FD3DC78AFDBE2B44BF239203C7C33CB5491636BB37
B7665EA3BD2558215B49AC3C1A5FC3AFF94FC1AA6E2C27A177C264076814BB60
8427381FD3DFAB68A367D1FC762965DD34A8277F8273826F0492B5DD0B068D68
88B01A1B0677B49D099AF79F4809CB5814DB5F4B3CD7870B432482FAD1DAEE7C
7688695753E6F2AF421C8FC2C58114420912602880893D13DD009CC4A4D8E80F
A3A1C5FD2FA9BFA41F87EE42C6E63791F60C618B3389A17A7E62502FE5B1653F
EF4751FBBE49E2F3C55A6E44BB516A035D0944FFFE300614317EB617A4955BCE
1D9C63221E7FC66486C37C989269A118ADE088A0C65C626C894A38EBB3E9556F
FE694F096555177E3D6E42471652BE3465E613AB18E1CF5D31DB1D5C08004317
53D1FFA7B143BEEE7FBD26C7C812888F7F14DDCA962A88CE0421600A3B3BF793
F547E9DEAA338D3A25D41F2F60668109184DCEBB5254F97C307EA1FEE81E0ACA
BC2A7030311C04F8E6862C88B3F79EF43D1238EDF2527768498EB88D22575E85
FE84D1F455A2DBB8815B964CE45895632103A1594C1992330FB703BB1C41E83E
F250D91DFC97E394F30CAAD0C5B7E8792EA8379D310364C819A7DCB61420610D
BA35BE10A0BA4B937A689289E76B3B3AA52472748DD51956FF956E5992A748BA
7E5F5352E919522C8DCB30CA9D886F4382F266B6EADC0604CA0972844B09EA02
70E87ABB4FAEB441E48D1576F453DA9B16C6927981E3955A5ED4ABB450DB12FF
C3DD9DBEB1811F3A0088BC3D25C5D294159B820B4839A00D9556E2C31040E92C
1CF20A29D45BB12EE97723CE06439CD7BB75519C04125C88841BE3D3C6E5FB42
E241AEAAE787D478F9AC2A249D44E0841C3C77FEAFE0734AAEAC570E47C61ABD
F107D5EBC6BDC8416D22BCBDADA2B0D53B7AED0CE412E5A0D3C666C73A03C8ED
F8302097B96BB6D86B6EEADE7CFB8F7AC6F3004E14F14F7498F7B89126FB6FCB
EEC037C22E6365FF699FE09166FC765B4D46B98E0B70668D99DA07E4B55CB1B8
88469DF34ACD6D6470A4578C7B951311C0C44BAEB2FC41FD08D8E940EC56AD4B
5FCCB487FDEBB3F51A9BFAA7225B725B9371BDE3B60EC5191586F53AC1B3A86F
A83ACA1AEA9B9EA11DD7D0842457EBDA205661C2CD4289E29F24171C3C1B8A75
A0950BDE7461C19BE13680C8D57981588D9FC1E2C25A228E6AC46A6B34A01866
E59A3066FF92CF20716B559A93FE6AC5987E942A0D293BD7CBD846886EF1FA6A
966449FD5BDB057D05D16150E4A8F793D9DCD83F138FD8B9B60041F594E5D193
846C14B9E616AF236DEBA03FA8BEA26BEBEB303A0382F5910919AFE334F73683
CED568E7F0DD05B8EB4B11D5406993E348050563469805259942680654838089
2E217669442EF2C9B95489AF27A763193055D48BE8BDCD28FC0D79430F7F3AA7
1E7D5201D312823655C3F360EC08ED90B4FD11A69CAEAD0DF4B677335102F099
81FD50009042207C2FC530C5E8A53CFC084F49015BC19411F5C306DA7D265C7C
3E5420617503393305F29B509BC61F3CDB8FE2FC7FE0E1D2B9CAF7976005AB4B
5DA0E61A997252009606313388D91804E3EF1FE936CFCCA8C3FE2474E6C8A5AF
880A65E810194FE359D12A2A41C6660D01BC03D1305BF4D44C3BD5DBC16B44D2
6BD83CEEA6F6EFFBE3B43261A0008201F65064E56D5C97932B65EFC7BC9927AD
AF882027B4621BAEF1B9BFE3466AA59FE76667D766FA13AB33BDF9CF0F0908AD
48902A8C70563A4ECD06C62E0B1721F4EFFE581426A1DF3DC56DFE390B237E34
21C23E4DE1D0CAD21E648FF28EBE5570945EA3793D0870A04FE776B80D1D1D7F
10BA9D83194164C8598A6CC93BE0E687CB44B3582AF9C2D26A6ECF214C8D2677
A0E67B4401DEC72AA27C0D062ED774FF080795B23B4E2DB99DAE9AF1CE956A3B
16C00DF2988DDAF1C1C8B653FCC47682C48A283DDF599631140569566893A3BA
41FC807C0AA8073533F3C9923BF681CC2A8CE8340758AEDCC24EA63876BB3365
F6F77E4B285CC2265E464E8808BDF0ABAC5333136AB9611838F29421E75DADFF
F8BC925090B391755F8F6DCCF1D503211338C74DB5BE4E3F4C41BB69DCD67EB8
29004CDA3490D1D0C006DBFDBF77F4A08173182E336AFBBDF3FEB05E74D6CC3D
B940B2714AF93F2EE5DC58DBF9D63E77D32D89219A73BB56517F3A5822F5E3B8
76E2B431CA7083D294E5411EF10DD430D9E5E74D6724924ADBBA0F218AC63132
E57B963CE446FC361270F8273C0431C569B3F12944E5D07AEBB6BBE09C62BFF4
6B68AAC129FC2988F00254AC73A20EBB3FECDB26A631F8804A6F855A5A2AEE01
5D58031376B3D20F06829558B0B9A57BF9404BEDFC78ED012E1D8F21295C8E54
DF74000D4AAA40FB466309C9BC012666B61C9F5060B20C3D912D45893081D529
2A4D163E4D302D3EF9B8837D7032AA640FA38AC30A222E4311671757DC3E7CC6
F7C7A9A3D3F72AD2D4740C0598FDF9E42A5F6A985114B0C16E8B0295B59B1EC2
34FED7B5F8C03A315E523BCB2EBA36143280C65FB7AF33E08C421263D83BBC56
D04BF3CA9B07A444EDE9DDF178F2F8DF0DA3FFC26DBAC23AC1A9B2FDF841BAB0
42998B929D51B9BFE0A23DEEA5ED6DE07CF0B1910ED59D59AD09022267D8F224
042E79BC707725C13B8446955E68F7527488A2B581FFCD25915FD5318C49ABD3
5F15B4023BACEAAA9EB02062660EBFFEA829258652E30577E1755181847D3611
F1F3CC94F47A0305AA8E5986E3363E983D08A9DD8F34DAFC08D9B041E66336D8
9825E3EA85A3B09186258837404CBB22F972E3F8DC3A0562C47A6B64C7A0A62A
6C0139B6B117F602C9A6294A8BD979D0E18E1EB14A99B0E7AE70A587F859FA6A
B02F11FEEBF0796A6B38AC271B06CE52FF958ABF19AF6274ABFF4FB41065CFAA
CC1AB63778868C72DA8C42C4D45E249A721F8351D5485028B7920F35B31A8B55
118773D1003F34B21539C8F771BE90DC55515FFEFDF1E30EAC0688238B488C1C
948B62AFDC83CD0AC21DCD27157C124E8797F18C2ABF27888E7C556C3B08EC50
83C52DDB8359A4FE52BA7AC4FB8C9953238A50E8BB491E544564DCAB0E3BE746
A381BBA29CE2F42444652F6D84340592E056DC01524FABF9B840B8FF0D0CD694
1521BD7422AECE12EAB21A9948ACB01EB6F5108E5185175A4139F0784DF64291
733DA1F951CEF7422E0EB9B15198031ABA3A2CBE61FCD2567D691D111D0EBDE5
9E845E535D5591FA84646C1339537C6326F9DA1E2A8B469089FEC389B05DEE4F
5A925F129B0F29434DB217DBA079045C78F67ABAD3E28634AF97696A55C71A2E
5E877362B827D897DC83C38C4613460DFA112FE7BA6BEE7E4CDB59E8C27688B2
FFF0696F4308D2CA63A2C22DD75BDCE3DFEC1DA310A9A64D8959043EA5556293
3CBC859F4315787AF5B3CB7D4F09208C69325CF4FAE85DD0209B854A7E8DC216
249FCF4E88F0A9F187D2D9520C47E4BE84344432F60E727C027D4FF8632BDB64
D22CAA5E73A63B53797DC260ED0E596CD2FF09E7A787826AB446F154223735BA
AE50978B97EF69C179AA50883B6F589D5613B3E7DA8EBF491EC590E95C76D393
33596F72FD667893DD9870FE3EE4DB98AF83DE133A05ED7A17A440688F148AC9
1AFD4D90D7EFE545FC237F1281280DA72AC0240CD2F63357A89609B9D0745C29
965798997FCB661211C72C553CFB252B4CDD321F5DEE1B6AE6BB25DC094980FE
3D921D58AEF7CA19E63BAB119D174083F0672D21813AA067E59404F9851D7E4B
1168FC6FD336DDD55D98E2256786F5E286731901364040DFB2479557024495C2
ED3225AFDFE0B9189175FED8D8B32A869B8B40BEF131F8DCF730B1855DAB77A9
83118E236AF7240FE67D3EF2A2EA837F6FAA6537A9CA5F48DDA654358ED14EAE
024D00ECA783F8CB967343CD4A3D043B54235753D3D4D3A68B7F8E01559AD249
F0E784E17A08991F0682731B8963599D8F554D3E7192D886B0533C7DB28D5454
FE14070FAF36A4CB63B6620D697F96CDEFD4DA7117B713FCD71B2B06D74C2F6E
7DD1FC0623F8517213544E8CA05E5BD0E7BAEAD258867FEDB433DE11773B6432
079BF86EABF4779C0F0C3FD7A04A188332947A1BE4AE8AED69EC29DB532F2E9B
AC4CCBD082F3F53A695FE9FC44EE3FBBBB321057896D87549A0496F465D00F07
66E196C03BC2D0C519F78259EDBBD7DE8CC24538DF6B765C81B335931050B468
865DE7308E8E14C02CA96A231A686271199CCD59FA104EBAA7715DF579FCB3A2
AA4E1B7B86948DEAAF3CD2B59381AD5D4B51390098DA93060832FB1DD20A80B6
2747633FEC6187DCBF78BF5E3643ABCBFE6A18BB2AA38617882990A660A8BCAC
78990386CAEC9D42FD75CE5F5F7280CC3A835B288611DCDEEEB596F455D0F95A
644B2CABE1DEA4E1672E3FE980F493C0C8FAC6191DB6B982DA14ACAED323D9AF
FE610A54A0915340F2DB41C31FC2ABA9E3CD7985A237C11C32C481FC4C79E2D3
70D629894F99D3A1144DA9C31BC5B0F17FCD9BEB270A8C4674997091A172950E
87AF2A56EBADCB4233D2F29D235BD75C1CD41798C763523F367F8795669F0B4E
446EAFE3CB12F6E385AB91EE2A045EE302F17DF302B8DD057348ACCB2B04465F
BEA8DEC44C86E2EFF0C769C8AFA93DCE5742F2D4F917DD620667B79B41F97C68
99E866C57E64287B2BE4D911971E79386CFC1944F05CDE073A17C26EB9B34813
2E0390C71E18669353307B572AB5FD5A82B8C0780CFC0FFD439330EEE907C8ED
4D3CD66CB775F3BEDED239416C879E6D40FA16E564810BCB1BD7BBD35F531B44
866EC9360CB5D2226481AB5B7E8EDCB96C8BBD1C6E8C1590B3CE658EB77B58F4
D04D00B2B7410BB799ADFDF25709A8696D992D2C7BF3579918B19B9128C2A835
12FC0569A26528CE50380D93BB7D813CE8818625DA161B30551E50DE50B9D003
57C70ED2E4618A6E0280BFD37113EB593027705BADFB26B7DE0810BC0412FF1A
EFEE1F9903195EABD68AFDD0A12E6481A348FE29B6F3E581D75A639F2CFD2EF7
8FF7ED7F8ABBF3825CAA8329FFB8B39E48183783344DCB96E253D02CC0659888
B87136566A8993B40E732D3985E598AAA8DB0F13D932054FA639F8424981D68A
BDE3C976DF384189A948531F89C48521BB9E7FF08F9ACF59390F2066AA14CB01
12175583790C245396EC83A61C715C7148F942DE3078C170AFECA7F1775D6111
5E898299CE87DDD65D850AEC5B9A3B0CAF79CA2C6C58C867166C29ED10EDE77E
EDCF505942C8C9DADF89F658AE0F68AE093CF8098CB85A79A739343128AF48D8
9A52FED010C800B2E5A5393669C71FB9DD32AC9F4FA9B969A711612F51064C13
75A60F63CB797F99ED9981221CE30CDCBE459BCEED8D80A1105E7D0F4AA2BA9A
6F0CCF922DE513B2D13616B091EAB5F7C09C38D34FE661FD5B5517F73F174355
3D9D26389FAE433B5CA2007F20B30DD32C227938F546B0C878B451F72483D95F
B6604F9EE6E9DE30894F75F81495DC610F912131E85592AC1A856D90774068F7
61ED153BC696419E1D116828312939858CC6EA29C347FECD0A330EB1DB705C70
C5A220C078C03720C14760B602535D1A82F4076070E9E363837F423D3F587499
8A2436301674448BE3DACF74DB4689616B10556BF84FA96C06558AF4C9F2F1D1
B5A942AE72A5595F6DA325B9DAB84AEB467C0DA4A116B14CE84382B692114DFF
1A4A1B364C2BA1AE1A86E945AD3F2919FE1B69EF06E6238C39A4E2AE68E64FB8
33A5974BBDFA70075A922AA5E1343D2392F0CDCE27C77CEB75BD87E8B288192F
E1CD6C7B5F77EB476E29B41AD220C5F5176958C1734F5D54E6F47CB378ED970F
CA5F1B104AB056549B188C0766F4F507437E32BE84816DD5386B091724D0FDED
499D0529E345BE7A44A59B6623F07A3504B60C0D21D8E9A9EE0E24A9317CCF86
66F44EECF60A8505E00CD209F6F365763EC4B00580411EE1A0789C81CE4515F9
D43E90AB3CF6EC986B036AE39CC5573413F671A40513F7D25384B0D539350A53
E24BCE1BBDCB2488C5DC808B672C7352358F3ACCCD926C95B5D8DE5E0B199B15
B5F8C9F89BA1AACD47D5706D9F0A6F5E847CDA6E0EC9A5ED19A1786258A9F8E8
BEF97B1FD4CF2790A19CB1975BB9026D273805643BA34D8555BF230C1D54D29E
7CF0311B0A077AFC4D3FDDD905D1BFCC77D505BDB3841E799F5685CD0B6B7703
5B8375EFE5022D58481E5F4B26CA503A22091B9E7E43A3301702D774DE3F53F1
CEA5DAA2A7EAB87C34A0A211DAAB7DD202746FF85A62BA32C804FA90C3EAF009
5D4E423A67D096862C0C7C515D320A005C501E501F7B483AB1179CB9B56F0D31
F09C01109E6FBA343B5AF9F914118600BCF36AC6050D6602C3B1E33BA1D84D43
BFFFCCA490B18E3D3766C7B2296290BD961310DDFA3A2CCFA0D21A5026124BDC
C670ADE9FBA2B307CBECBE24173FDB4BC86873D179D88A0A94D2B6388F9B8BD5
8E68D0982EAB0BA65C597DD3D9DBBB0A04586053567D192BFB05F63FF80B8AE0
E5B0354D85CC21CE57B66BFE8F5AF4B8387A18032A418AE49BE762A5E2AB06A6
1AD216EDAAB4E2C0FBFF0293C0AAF406FA08CC6315B254AEA905D779AD278CA8
D553AC220EF96C8E56A8631EF5E2935768B1867615C1E336BD6FC65597DB9B12
C6005B9D3A48CA1877F3817B234FC4FE47BBCF8D41A9E330AF1A5256F5F26305
5CF70CB228FD8D764B99AF825C4C153EB80F08464405DD809B414B3AFB82E9BA
C5CA56F19E724FC076767A0BDDD302BEC9229954C056A1DDD63997E91EC2B46F
B322DA22A1E9FF2BCC9E3C4595B2D1C9160C1C722E4D3F85ED159F9306FCAEF2
2A2F5C127B4CC684CFFC54A227E4906C5E40981ED5051EB34A7ED8305E2C6235
3F5A5D18C6ADCA84095B756D2522BC0D322E5E034F94A6A6CB5205A8DA30D863
6B2F07B46F19FBEA7EFB67FF93509400EDC6B8980C0A5313874D76D2B42EF765
509C5BA8971A822F227D37FB7D893DFA6C5546F42C88492D3E12E7B9939329E2
537914886C7A670FC1830AA82BE102DC02FF140BEF1BA0BD1E1EE316266AB3F5
E18A20D83C2BD027C96D69FF1EF1629B266657BC10D0C95840B716B3B631152A
5527D15A12D9B31CBC192A65C0756F856337A0CB8E62087080ACCEAA3F10C3D7
02FD2569F8F20BE3A067DFDDD557102050EBC06A199C9A4665ACC1CB1BF1F338
818258F1A3CC59666D68E6433B41086F2AB69CC06F3E1B592F486D6DC2DF6E9C
8751A1DCF25A758A9A20D13AD7723A0015AB002038D81837182AF2C009B70C62
C26AF31BEFB5C3116A39850E7B06EB19D5BB48D5AA92EFECA4854B175BBCCDA1
BF9B5BB8A66C8413ADE85EB504D96B00A1F817359EC26FD75905E22C664D6A78
06EC0535F1C78AFD3662E7E0836101D9BBA6F29A954F8532CA09997626F79966
7DC9970684C6AF78B8FF538B68989D2B25923E64DCFBB87D311E6BAC376F6741
754256FC5F537264C0D006978CBDE96F8423792D55018D106D5618371F4B613E
968D81A5E0DC032F740A03C4109E8FCBFA469A00DE853DC4F08F34E200D9AAFC
BD57B60CACA18CD14FD71402EB35028B31B846B9730A2D0E0AA2BCA5529C72A8
E2493D898EDCDF404D4062D79C6D552DADB7AB57A9778B6F3F578BBD113CC546
8AD2BBD18DAB285D8A93948AA1BDE6746EEDE81D83324E1212A51A5FA4B73468
64E6AF6D88BB157EEA5436471E8608F455E015A9449140B7AB5254600B95AC45
F5AE9D242E0B61381094893C965358563540BC0D7A7856D2409B5086FCD6181D
D539CB0BF72085F4BF11B91EF410CFF08A596CD54BDA0B5DE75477AE0E4B406A
D33743D84ED2DB35B7E23135FB08A0B6DE4E08283337151424B886A172EA59EA
0C7518E597D28721E9FF916E6BBE5F1926F3A7BC0CFC42ADEAB63D51F2024D2F
AEB523A38F73795EA52B26532BF06EF31A4368603D62490305ACADE1E4039D24
2E7434E22EC93F5D6E4B30E4561B10DFF20AA1870924A2A3E5F53F454E745574
255A02CD28BA9E87AD4D5015DC41862DB4B615848F03495A141DF2409912E1C6
E48EB666BACC0E935D285839815BE1CA543A520F26E6F4FCFB49D63BFF959A81
1BC303B5D5409B7011F593668999C3A1F191316BF39BF3624CB584D3DDF969E3
D44BA58E9F6F4FE9641E9DFC365C852E8A76A431AFBE13FB03BE2A1AB91A5B2E
56632638290848722AC7720CF0A4E082E3BDBDACC98378D42FC3B7DEF14217ED
30B42286360C27040EE8AFD8780D41A69D04185E2327A7A7082000541E4E8096
5E218995F1A0E73A6DE9601E2FD843A5DE853E772A42CE1DA35C764B869EE796
6963A974630F7FA9EDE1682E0CA9974F03B0B331DBC88524130625B70FF398FB
DAA06516AD20B59E5A4D9E2C9CD6B34FAF9B1AEA30BE62E3935B0E15BE2901AC
BE0BE0FAA239302D33A5A672B4B3BE25B00BF0BAB114A510EBBE805CC97B5C4B
F57BFA11E9379C5558AEAC9A33699F842A16E1500F457207461A275FC898BFA5
5D1F9CFAD6F29D38F449175F26C1F9C852C8939C314FFADA097936FCC5509450
3659D5D5F2ECA92F53611145CEAEE80B1BDF444C6144D032235A2F7136BDF8CE
3C652777B7216ECFD45D805234F98021CDA3929E252DF036037FFA333E0A1938
C5E0D06723BB5F46D5B3F4C50BA806518738744D88FF3365E238DE2431EAC8B4
94B7A486B1EA3945ACCE7BA7EBECC4E9DB22A015221EBEFDFC6231A2A6E92519
E0A25A8046E0B65CB1FD225292E903FE453A15FC84352E97F09FD8E6E8128F31
8CF65DEB3C108AD5B484ABC92BECC961B0B1ABBD9239C9B660518C457043A5C0
0DDB3150304F26D4CB66D8C647B66A98F0F9F971F042D98510B6AC680A8442C2
303070332D3DDDE4C116B0E92B66DC07EF8B99DC4F5B1DBDBC832D60E58A729F
24BF39F79D3EB87A0AEDCB65F8D40C743CA8629437BFEFE10816C98F6C3B9A4D
6E6E8183CFF1473939C558CA60998B467A6F5AF83B12B7772ECA428BF9BFF91D
9D898C2117F881DCD822178A446D8CEC5AC289BB91F3646D741730EDE2DEA3FD
CA4CE35D25C1EE35C5E8B7B5C07B5F2688CF8DF31A3D933E50E333B409CF4419
4242BEDEF54F6338C26A17903D0C639784F01AF4FD84DA408C335B8BBA07CB2B
623FB950B5AD36C5461FEC830E707F98199773229C002274EDA6D59580920607
B1729F42B371DA95FD16A2F2399E862A2930E07FA3F0CFDF8B23A4659EF0FAA0
8F30D0555773B6C146E4222BEB3C08E4E7A40544441299F1787ECC2F3BF58BE6
A5293EB7A817293BF2CD6170CC06EFFED9F2798B33BD553D1151199B86640EEA
8B49F80BC015F7A3F869EC9B12426D220EC981E3B2E0696F8E560AA2BEEB9DAF
B974A5B6C86E44DE45170EFE87709EB5BA94A216A4257D2E35C7F031AE4CC3AC
97F0838B0B6A19C497B4CB6653E17BE95446CC9396D229F4A9CF6E8115FC3879
7E32B36EB2363DE725D499C3B01F34E39F71454979A11413FEB73F633FFDF3CD
B6D6242CA31FEEEA166EEAFEA964BF47C6C142CDCE90801DAD770F24E4ED4574
A55F1206AEF7CB2C0EEC723FF9ECFE7DF30A770CE0E79FAD0E472E715F612B8D
A70A1A2AA4D2EAFF6DD9AB034EDF79D2D0CF27115E30E38827E91FCF71561757
F28439DD1E196085E1FB8306BB0A1026E494CE78A1F937D82F59CAD640181B76
D8163CD79DEFE0B3011526220346C843AF0C462496FEB29E48A59F0878E00FA4
F26514F04A3AEDF14EED0B547210B7F3E7C1A5951A5713227DEA859C13FF4C5B
EB38346E3CDAFA69849FDD7D9099ECB7D0DA9C90640D449BE15511FE504E94A6
10ED4C88DDD99F057534B8D23B6CD74908D556D7D816629D14C53D143A93AF46
D470472C11D6E3C39A5F88A8B9318546BDD02D36CD00AD9EB3801DF2F2D0D76F
D6B5946579F0110AB4DCFB38823D2F73E562B6B669750F5DD71BD6F61554EDBD
192FD5256807612EE76BE91554C89BB38D88BBC246E1FDC16AD0B3F60BA1DCC6
1065885C01FD6A1FAEC51E22D2F5A3FF7A028B59FA560DA5EFDB22578A7F9D69
51AB0D60DD770F50E19218DF29ECD5D48EE03DBF9BE10DD9B5270BA9F142E22F
5851D9CDACE824337646B0E515B7FD87333B8F0AC872851521BD7422E81203C3
B278571FE5664EA7145BBF16462EE5D9BDA5D89F2EE939111B15C5A35F291256
C8AD1F20E68CC0C4F9D302C62835F12AF767D539960E642B7FC5E8EA243A5B05
241460A6A05BB8C3AE3F900DA1A94B88174D305B20B16123685577CF75789211
B356F94C2EA056340BCB85F1064E63F0F08578A30A6A7F224A1FC10158714054
24CC6B8A78C250585C8ACC8914F54313F101F5C2ED80EB0F08257C5BC044A770
7D25CA4E68F75333B2DE99DD2C16B4975214425D03C4A81E36E461F0309D2A74
8982E9176B5FC1351BE2F83183022C878A9A25421406A5176B9E46D3D0909ECA
C3F2A05C77B606E72F0597DEC57340293C5AA4E481A741F180257FE6830AFB9C
241CF38442A5253510208B4B0D7DF6B36367AFA87F2172C7E43E80E47C2EF998
D1C6974021FFEC051A49DBEC6534E8488B6AF86FB2B0645EC0A0D871A620BA85
A30BD858175D5D107C8437DE05AE2F8A2DE569626641A1AB907A9B997C82D389
77D171B15DD33AD54F960F24C43B8E7D0AEB4E770E9DED1AB9B50776111071F9
843E7E405B5D57F356E73859C71C42270FAB291ACED3B0453ED72FAE2F8B830A
B1841FD0EC4D6A053A193A160718D15FC86ADC0BB0B6C0AA31C57417885AC48E
939AED5C59459E230067967A1A3817CE2A3E2C7C0BCF19895AE59CD940B462C2
8DAA053C88A17B2E392E8330F91062EE042EACEAB59CD22AED3C4BA274B78374
09F7F7641CA807B2598C3BD7A706F7F21044A8A279D5C85EF631857C9FCB02A3
A4A609E7DABA02516D556CDDF69F323FE1C8C0D186131CBEDAF83E6B7E79F881
05C7E99E2202A3ABA95172DBEF053374D01E8E6D9642DBA5779EC35EFFAB41CC
3B9146B8B2ACE5980EB7F63938BE3BCDDD2F4032E1ADD8E99BA64A615938CC36
B4D82AB05B722D16D1F4537CB9C8D0B9B55E743FAA61DFBBCC09ABA7F639067B
4B1CE7085F7B9D44FEECC6A5FC39BC31444CB58AB76124449F2CEC6A4D68FDED
D8872948F79D5158447C8621ED86ECF4043D63503CAD6548D0F2FB68BF129C2B
3EF13C02D08567D890C2957A71B6684FA0EA1C7F0EA5B2946E5680042E03FD81
AECD02C97BCAEBB9512A4C1F23D91B50D11C2F85801353E8E235704E98A3D1A1
6656FC81C0187AF573194DD1A3995E4CE0EB47FDE7212BB01824072A6879C6F5
5485ECB4A4C162FF16A6F47C852399414A0B6699EF13FF1ACA510D7FD36A5828
D0A89CF994E60832DE009B6D57E11AB564A93AC32F5B0AB0158EA8903A6E2C19
453B40517891AD16F49D3975D56E95A92F3379F1C70F0B9D507C35B2DE05725B
80D85B0F740A5A87D7D85391ED0F054360D9EBEC93DA9D34A4C04F7C43F158E7
D42E1401A8BF70A3C891E1D31E6534D90F0DD3E77FCD0252178FED7CDA8844EB
5425521407389C627A686AA438266C47DE3DC6B596D3DC87AB035DE6B100BB26
1726ED4922B80AE4C107DB8AF28B4975455CEE1BB7A126E4243EB937E8A61FFC
1CF855063D865B93F325AD24664C96EED8DB83D23F7A37A10D9502EF9E2617FF
DCEEAF415E67E7CBE1CCFA4B07A5265E7A0203181E4291857EC077BB6E64C24E
8B233A1A58AEAA06379C9A8BF85B3751ECFB9CA45975F5D52116B1623D560BE6
DF82C2E4291CCFDAF8E39BF35DED0B12D4145F5C6086F89EED7EF81F7C3DE36E
D0BD0E131BE6FD331FE95BE589E167985F61CA0E3E3043A767102648DE3CEB5F
F58CB0F7EC02D7F365022BD8798568C40DFAC99FEBC2B0D19955C05BB32230FE
2A8E7110B41DAF2C3D4B998D2D95421AF2CB54C593677426C6D0E10AEB4685D8
7C1736690F7BE1E1B9D9BA406A1B7A1CFFB8662ADEBE46F07FD555CD8E763DB2
43938D841D5C3C82398F0ECD9021B2A349DB16F1BFD27788A51AEAB0DA742FF6
3EF426D5FF7F10BFD4467BAF34835CA4A5782C5024C0FAD42E68141CAE11715F
DEF1D71F2F9DA4C2E8D072E8F70CFFD833B4DA8548B5C0F4FF9B6A1C2A8C3AFC
E0E7A491EE2A36C2C5768F08FC478E693CA7828C90FE2207EC2D06741E99BA17
F983A58530B07C27D76C0FD2726ED8541D23DBDB44BFD8A3C7FDCE757B6C79D7
01BBBF3C344DD99EE4A7B7D974F03BE4933EB4C186FD01840EEC58BAC37AE204
9EA3DD881C5ED3372AEEF4F12F415205D7B59E09A3C50B40FD5613E1BC1FCA15
5BE79E19E7AF6DA023D50EF50F0BCDD154810310CB04F76DE8CDDFEAFB8A0CBC
0119E6711BA65915727497219B013BB8D7A64B4CC91386CC253D71A946B8DE0B
B13734C9E722B70ACD2A7EF4020FB79F5C596F5D6FF440DBCECC1B91FF3ED771
057FCB6AB1CC9D10E15DDA6159906356E3BA5536FD22AFDFDB89CE86B130DF44
164C516A24BAD59710AF2F9E2828305CC6540ECD955FEB3D89021D60151C427A
0874F11E6E78EB0CF235DD2DC448EB69B040CB8B825B279962F0181020981DD5
D1F0D0D5380C7BAFC9860F61123B85303CB7E3D8878F63880ED8C1D33DBA241E
D048ABDA38E1BF2F2D44EE3111675DAE1E5581D1DF38FC5D7E05910C6966F994
90B2A94F0EADBEB97CF4D0172757515E552E41C99E1C96F4C6C9C5796BEC270C
E7700686FE83C8212CCE4DECA894C6AC618011E9489167D027202A332722275A
82F8AE601E81796FD90ABE56587062B41A49797B6E7ACB7D3D2049B9CA15E0DD
3C69FDB49E1B31830CB49E8AF22CC9B63AA8291D791A8B29CCFE97E03CE08C42
1263D83BBC56D04BF3CA9B085A5292ED93421A4AE8700845C5EFF77DCC956CD3
872085DC6D404D9BBB1090E9EE61C3BB26B6E2E61D58B5CA96B3D1D4F44B2AE4
1DF277E52D0399EB6F2622FD2F44F7208E6CA2A9E4871BAF58061E02D3D4F36F
E3DE022A4C7ADB1C9E468801B4B7F4E39A5A0C9FD283640F5CC82B42C73D588F
93D21ABF59B11944BF1CBE00E5976426A755DD9FC763FD40E6539E7A0D283F7C
07AB3D35A6CC5D8B4FCF9DDFBBFE900009F02939A2DEF6BC9D6EE548A507D731
58928E265C9FA4CEA82E52B5B7576890D0823E35D3600CFE96C9075C7E9467C1
CF82077AC9C414466099CCEE4403E92502606D642F86FE39DD5462BA30DE797E
DC438D9FB3D1B58512749BFD5C15D966FA297ABD94421B6CF295EDEDF1C80CBB
6EE8935869982FC81C9874CF7A1061AC84461E2C35B53BC3319EC016F9450EEE
8C7E7C399B858C87B567F334D3F47F63FB8EAA71B39B7AF2DC50397AFCC84723
B22E05955082E1FB3C5968B1F94054A5B8DA535B84C040872F3E7AD5D70F0D5B
D978A09B3A4CA9D4D06EAAD43B64CA4F85164ED346ABB0317969E0A255A0C375
ABEAC261DE7A5FF4FB561FEC56863E893BFD9F0E9BA23F267325480A57B64DE2
2ED7C555EC2A6B1EB0AECCFCE96209BEAA676650FF097EBFB16035CCC845D958
D548A98362133AFFD7D6599393967C7C97C4A7384FD0C9971F41866BA4ADFC8A
AD2A83B02FAC3C4FC45050FA5E844802373E3A5348E7F410E9A3FB112F86B571
924A9E6FC3D89130FB541A33C18EE2748113BC9CDDA14C39DC5B57A0261EB631
08D6EA8951D35498E005FC163DD57E53AB4918EDB9560BE2322BFAA89EC25C9F
7D6B56D0EAA9EE536874311CF48A174E63E97A47825AA81A8BFAABC6E2B24E58
BC3C8ECC17F6EA82A4817158E13CB12C36612D0E9F1DC7BE4C83A070BA92AA3A
0FDF1E58AB078CFC02DFA5BB313BFD93485DD07FC03ABBDBC42D55EAAE420BEE
D259BBED051965873AB4645892A3032BC29C73C3D0AD0771D60753C5CCFC7EB0
64FA0A0958702D16AE3F39574F4183D4EBE24EC20B34232AB6C6FD80FF422423
D93F10886EFF8D547F8EB1A3278F5C3BAE6AFB38B757DA81569A0E82758391F7
B71160E6CEC7B0B61DADB95DDF0EFAC0C0817E5180EEA1722D77FF400C798E13
DD27F48BC3B578923B32352962F28E1298949F02F492D1538E466D8D08C2925D
EC62CA4CA180F3F61EBD11480444461AB477118D9EFBFB8D45D1A5322C1051A0
3A7907A725B3B78DC0828C8A08FE98C99C2A55EFDB97B56D5A4E031CD84A3A3A
DF88149D2F66F5579AD261AF4333FF1905B3B54FC8437DE57D9852BE370C5F49
E502F7D48121F5EDA252F0C02D798A51BAF61532B6D5BCE7C2F57EE57F50C5A1
5ECC0EB488B284E37710A9A1AB429277B77BF44FF4D25C105ED983DBB22B6FFA
59AF34878642F9A31FDBE395B66C629D8843ECD4207F60352BAF4FC88F41F7DD
7A73D7661387BD1EB1877732CCC5F6CB39328ED3223A6D26B84D213B7F66094D
AD9B9CB52647ED165AF16EF1BBD7CBEFD28943479787BD1250D8FE49510D0ED3
1E930615A78C826B4814C608B4DDD708137CFA4FDA91BE8AEED0216748129E8E
A2E61DE38453AEFB7BC8830794397E739C254AD74AE1A56D82182BB5419A188A
51C8E9877DF056A47BDCDF510FFDBECB9703956BA1A8B0EDCEF44BF705C5C4FA
63BEEC03A321C96B32DF4C339EFDB8B5C68A6424CBFB54560459B7CEC277C0E7
5CEED5DC357FEC6FA98002905B196B50D9BB7F0F8D1306D814D93C72678BB301
3D3E9055F947EFED6F2C99AA34DC48F6EF597002A50773EECE5FEEC5400C687E
2003D74DB2D0EE0B28D0D45CA40B9186C48F2F39A20C27A2FB520B2692F52DF8
9CCC70DC8FCED3E980014995B21E19597903C077613C7179F426C5DDC4A604BD
B0437F0969612AFEB2FD4378CC618860F212402AB65F33C60FDB1228C5AD9143
7CE174920E108B6251D4DBF39EC35FE18DEFFFE48C40974BA685F6B14095B00E
ADF940590A1A51B8058E984B0F2E9E610CFDBA8EB103E3FCFED7C21CE3CB4ABE
0686F6574C8CDB7F1A399630166CEFF5EE61FC25482A27A092048FDDE7F8EEA6
12DFF0432B0FE4E7F1CB18519C6BB508294B804FB5A10A2B5ABCBED93DD99C3F
F159171D6532306F07A1188ACC084854C2DDA491E2336382C5C7045535E44A62
BC0683BA157587E77B0D275BC02630C6B4D35E89F3FF4269126B48BDDE9BEEF7
896CBA737A07F32FB7D05438BCC522EDB68527550414986049A358D5B5913E15
28E90B34C83623FB5FE9127DE46343604A3CCB024E32D290F9BA2CB92821D553
83E094052C8648A5470915C7BD1016D51ED6693B0E9226FB6FCBEEC037C6647F
6AA44E9CBDE36F886A6D4CB723B35069CC8B8479ADF0A36405FF97A45A994617
FC313F431BE650BB57F97CC107D1161D391E60CD49FA20E4E37E04CFC879DABD
78E652C2F309C1DDE0E502F372B49A699B6B9ABD173B95435838007D1D31004E
BF3FC375EE2D2E9CD541608FD6E369E294E3DF4F25220060FE23E1DF84C43158
BD937737ED6FA58D0496515D1B2F8F1E002BD8798568C40DFAC99FEBC2B0D191
DDFEA86661022E895E3B5148C71E277746251522316D1F1BFD940DE6B6FE3FE4
41A1772AB83AF40B509B909049B6E202EB40699074E7AC102DC114CF11E3F7FC
97F44E6642DD04CBDE9CAAE94E059805F361747913F8A8224D0B673D510956DD
3C8503B34C9F165E4550B85F448F75ACADFF4CCAF32EB2FA8AD288EC56023BB2
588818CCB4C31EEA83A4F2CBBB332B72A57E8217DB5455E0D424F620CA11DF38
0F9555407FEE707306F09B05288CC0E69FAC766FD964AD9B1AEA30BE62E3935B
0E15BE2901A5D66BCE46875C03C58302570443FCD3BDC6D7927549322051A7D1
1D35BD930FAA27BC25E6347D54643CB242CC43E683494C5EE74F40D1EBEC7F5F
33F5A80361682F6D838CEB488F17D467B5F6433D515D585A3F9321558D70B554
77C8A426A2FAF0601684615541A927BC72A59B1B94B99C09FC709727BE1BEEDE
3829DA2412F6D9503A4F895F40C2797C6F4C56D862C0F22D3DB82516DC854CB1
A3062167ED02D8D7CD35B24C4F14A4444BE7A504ACC0485E7F341391CA381919
C7780E7737A6F2C9E373342D151FBFBC7797D767663161D2860261A461DBE273
3F5D21E045B83EB018D939123745CA8E785E1DF11C2B17E8D5E1B958575498D6
DD4F84FC36FD6B20AEAC91966BB70B3AC1DC1178DD351F3D55BCB99FED4DD291
4F5AAE6D6DB5E8519AB714F67882D11587308777DC1D69A1BF0D49C04A9FAD1C
6531AFFBE13ADCF5A1BE53D3F1D288236B55DB04D33520EEF0051FC53362B59F
EFB4B949CAA426E90BFA7ED45DC185F93D93E15FA47F44C4E2F2655CCB85FB2B
D18DFBA7AD10A88F65B13ED8C992268C3BFB4957CFB47CE947D51FAE1E8B79CF
890239F1FB31DD21E33A663BFCE6EE05D1706F047543C627A80521DE9A37D25A
6A365D2BD10C724EC89BC5F5E49B153459D90ECF9DBF326C93ED830864915235
8584CA1858F6CB95856B01E87205AA9053B790FAC214EA649EF0A956E57BE7C3
F72D63C86DDE94D7190AC03C53A0FF128826674AA81BB3AAA4ECE54B38EA0E3A
81249F38B9669785DA849333314C680490FEA4A1CFF6AF8045B5BE8C6F41CDB9
1A51F24526F2168FA9CCF77CB90A1E91C0F450A06FDC7068F5C002EE08535E73
C64AE0A8BFB274C4D2210A50C60369C5B1A6EEDF90BA7A50FB5E53F6819F3DC0
31E0EDB2890D3E5945EF265D6DD1B028AB5761132321BBD153DA06B81E306AA8
061AEDFD7BFFB6E55B168ED5A2E8056EBB3EBC5500E8A48264EAA8E26DACFAD9
A265F84F33E2B3AED352BEF58C560E44F27B9FCC33D7351EE5A00EBD672EBA18
43B8284794F9DC9B76D40B27E81B26F2A9AFAA4934B80E1124AE6DFD051BFCC4
831A048ACA4E3E340A55A5EAD6F74FAE046B24190FB135BFBBA4E37F67D6A0DF
56D8D9A19C29C585DA02AAFED53C1E19AEF67B01BA17ABDB13CA471362049435
BBF010481AE2966CC3D93AF08A44DE081A7A9EA8CEC522D2B30E6BF73AF84707
4B61C682AFF95E31F7385BFF7C1FA58CE568964C974F08D823F02E097E5F9DA4
82AFB2D1E1A0E97003661CD4E54637A9CCFF49C65467B4D572BE512E7DFABC52
2FECDAD5E29A7ADA0E2FE3929593840684A0B9840E733E6DB84E67ADCB0646D1
B8A60F2D2C878557810A1559523CDFFF0F3D8DCE1B21A0D3E8D94989A5D54FB7
236008E70B130993055F843A125DD10A68AC317CC09C75EDA9A6F16A5C090064
86D2556472E7DEBAFE06B501C7A2041B4AE823CB74464DFF46AB72FF49BBB34B
38BE68F7DCB7323674E061FD50A132E275C569901E1F10DF7F33A68B06CBDC8D
9D0B69B37B30E5E7D817AB38790E87297C965D488B17B526D31D354BF15D2B2A
9D775CC3241E86B7AFFDE11AEAC70DD8B306E7A79859A5358B51398DB1E421A1
C48181C93F2AFB1C4ED66E63D9AFEF298507F621F46178C0FCFD72FE00844D07
B311E7B480D4A8DB59D356D61BDD93EF0C918544BE60769C96DC633BECC3721D
6E8CC7B29EC618CA2986F81259F8D5510C8C0470CD3AD16D161C21981161813B
336D62B676F4FF319CD64546E560F1515870EC83E16E093BAA6332F7CE1D2634
6B09FC6A4E91B9F9F4B8D76BDE7E6117B1BDB187E14D45D6BFCAB41691E4E87D
DFEA64AE533D0F901630F4313E28B9835AD8D9B490FB2039F3590F22C984C249
76CD54A17246E9D34F34D5D4A5EB66E899214A90857B65566F5903A6BAE88B8C
5259F8C49C0B327AFEF4A2B222301FD49CCC176E7C401116CFBE26F2871B3CD1
B8A26BDF1FA0CEC85732908291B1EEE859A2E5B5632C8C2F19AC18C5BFB03128
E6961B63F20E52A1AE5073C7E4F319A0347EC42ECF7716A5C0B17CBB4088A41B
ADA4B5D72F904B8BD5FAA0DD5E73A1CDFEA8E1DCEFA81BC9EA8A8E7E6431BBB7
11BC075B116894C7BA9316BF20815B3683BC6677DC1D0BEB399BE1AB100CC532
4288B5DED1986EE87417EA1BF25540F71DF81652760623A21D85FBD07EB4B04B
A53758C5F12E2181692C9ADBB1289515F5618E255704704B52062BD9A18B1C37
73AF4A752E5C0D574D38A12FF968C5549BAA7E0F5B9D9F26A50B23B4D8463DE9
D30C60E702F76CEAFCD124689C499C64448022D5EB7A5527A212C90AF62BD2FB
82DF51FBC45BE43685B0144AFDC37E439438C256991BD78E84E8E01E3FAE6EAA
C2E5ABFB75A412B3B9FFBFF121AE542F7F103D13C7B8A0F0EC161CD2C4EC1561
CD4EBC1CC4BDB296A481D03361EDF51CFCEC31CB4CE13C262240B8E83AC447D3
2B0A258F6696E017DE1C5E0DE9DFF5117F9E66700E415678CD1F0A008E4D217B
727C428CBBE7C3D8596330893FB9B0C3B6B8EDD899E447AB390772C8D454F053
7F1445C9506F0BBB74D534278C6A16A9C1889BBFA336E5893F900E0E553F4927
ACE6A313FA40591A10D6B7587CA36C8712E36D1C8D8011E8CCA85AFC9CB5BCA8
D1892E952ACE33A672D3CF19E8B87F7DF228F406F9770E51EC9802D78CE8FC48
A03E1137D5A1281CAA541FD1179942A99CEE9C100E2738EB997D3EC9C30BB177
CED6D76B126910E6B3539B9ACF4C51DD5A24909A3DAE4B8D2A0F63A77F07ABEA
1BACD611863184208463E73BAB631ACE06A9A9FD49A923A099C7B63BD1335E4C
253D16818C5AA2F407616D86D474F2FBA2624D28DC5CD51B8EB316C7F60C0654
F9BD5BCBFC0A2EEF1BABD3B3ECEF006895D575295B935B478692084792A305A0
6A7A6CE24B00960111A1630CEF8DBED9AB3912E566FE3DCC37278E742902AAFB
C4925AC598188A66451FB569ADFA910C9F0394D31F3FA6BEF7618082763CE6FD
E99BD7C45431F9F214B3B94A26D9914C344872DBFC2CA48775731A8C04B535DC
B52406A2FC117F24C45E05B5474DC327006C357D6EDA1AA0D914770CC0B58933
C514859212CCFFF5A79D1CFCD1EEE8628075CD3FE42F4A9F6190D2CE0DAB0A86
8C933AFA249B63D3936ACD1F7E80ED30D76F25EA45D7560A1608452AE334C67A
08EBC4C88DCE33818380C1756BBBB32ADF930A9C6C0CA97A976FC3D891C3CBFA
8A0F463E740105BB7CFC9396C33204425296BF5B2167F81D9C3C2E60C80F2A3A
1E688B8553C93E367569F4DC7EF057FB789FC3FD8DD3BA280CD8260FC6E2607A
ABC17D9F4357848584B3AC03E40C3E6F1A9864D2EAE5E3CCEBA2EFEB3C2EF459
2972FE1078153E392FB6E03373FDCA63EA0AB286E1918C69B610CAC7D8BF7C58
C1343F917FECCED0CDDAD9C5C5575C0051D5DC227CFC305CC58E312B9308C223
8A640F5CC8D80FAF569EBC28AFA537E3BF94DB324ECFBC246BDCB01FBD00F174
B7D35600709639BBC939845899F1FC49CE61B278363C7CEA4068269E55652934
045E4EC16AC5E455B072F1B6396B7ED0BEEC7F258D6C1BB819027F631D382810
AC00C2D584DF21B6E6A3A458FC5E14EC23A633E5159FF0F369791FB483E21813
996F4CAA345F9A33F535D8F0F5EE31548493F52808A4F2448CFD443A91016C54
8AB2D216F355139AE66F1DB0C364A26FC771ABF9BC945C595C9B5C56A120C078
C03720C14760B602535D1A8451C3363F07A51BB82EA7D1DEE101693C9467D352
369EA65B23B88AC8FE79E6B8C1A4F0AB239B5777CBDE7204D3A5C78F6CC83279
1E3BD207A5614C3AA51976290C34C7B6B747685686F355F876D2BCA16F55A7BF
27EA0B646831A271A91E0CDA710B6DE2B0EE515A46A3FCFF4A048CE8FA10C9A4
4466E5712D05E49BB9F929022D830D6E7AD392E9CB1386C8D8E7AA4C01DE1BFF
A48CD544CA6BEF224211442CC1A0DD66DEDDDB48BEF35932F1071A79C9C70901
C3E00C6243BE5849C61F4D0E4ECF9FFD37BEA1EB7E35927725ECBCEF72D69515
D92BCFCD568134BD088F08033E590A628F14FCED37AC036056E34E56037638CF
BD070BF388E89B4DF7A7EA64BC4B3F03E558D4E905A8D393F05D744F93E19577
17421954E1707F21FAD8180842478D64F81F0751FFB9D128559AA7D9166121CA
A20D7C9E850C920DBFFD904338250F810DAEDBBF286B0C5DEE5736DE88D77DAE
C1FE8C306F4047029E628D07207092D7B0C352FBEE5318E687138B9745DF159A
ECC90278B803E478EC0FFC4D6577AEE83839A591DBB7AE384061BB56E07F2D81
DA888AF3146BD2B25F3BDB751E321A1245B6E899DEB0889A4F40DAEAA7A8A714
E8BECA282667BE3FA009B70D670B9380795FF1EAEF19CE8F13322AE2BFD1DD2D
02E3BCF448F5858C12DC56BFD6D8E99EFB170AD37E9D2669924A2BA2C814CAF6
06A30F2E4D0C833C197A726A2212F65CD69B3817C5F013AF74A3A76643AE8892
978047F04EC557881F5F8F63313C8316C4460ABD45A560AF9E7D5D88A03E0A9D
DF468309EA33D6BB251D10998865526D6E7824A590B9F2BE343D48C0DC4FB218
634244C14F1E9448DFF04EDA8096FA09C9E7AC8FAD65ED638EFA003DEA425AAB
8DBE2E8F752BA148EF94BE6C8301962EB92D325FB5183CE11902746ECC91EB5E
1AB0E26FD68FF6E544EE57ED7B2BBFF76B7B97787A2285FA98E81F7F2A6B886F
C9FEB9374FC0502ABA4C2351E2B5398431BB5A8B441D37AABBAD6C437BF320AD
9D954B85C98CF2DEC6702236D69629AFA49D867C7A17BBD16B6F54019B8E6713
4A6F3BB2EDC4E52D91B672B6CC3637558B87AA97C9090D2FB141377609EB379C
FA40C1C197497A23A505863573520DC72BCFA42669955DC336242B3D3CA9B608
A39DD646A9FC46F883B8F0E7C04E715E3D7AAAA03214F94C055805C552C29C3F
B1CAFFDA9D73735FBB5C23F9186EC0C73C9726FED0673A2593D602CF8FA254E2
CF3528E2B7D47548E10F688C53FD533519F7BCAE4694AC42BA8C118D5E633320
96B2A7A6B23F5846B09734708E3222ABB0A31721CC2AF5BC4FF0A434FFA494F5
E1E9D157CF5B3A00A49E878E67295898FAB0CEA783C66C42588AC4EA2E6D3DC5
0461005978A8A416845009729C7365C0E7A405E927251313E9B4EC437D15F988
59DE5A01E129BE609D09742BBAF9133C4CD3AA2A661ADFA3D2747766CC333BA0
D69C4ACD2661A222E0907E324FB613643ED9E2782BBE3A6BB588B38DAE4D523A
16E3D9AE830EAD1513DC65E54BD0F6363687E22B91BBB08D03581759867B8EDB
46BC61866B7CE08D700CD87ED730F1FAA0783A7D34D1E059C27C16CE1AA92F44
DD64133C102B47D4A17FB04AC4CAA8F600161B573B900272AC56B248B4ABEE4A
33BAB9230E8297D870851BB14D38AB72940C08D8BCF67A6167D900BDCE4BD0E3
3410C46023251812C92C4F0D00199EBD8624711C8B23F72978F1CE8B0CFE9F0A
735A7FB5B6C08434538D2F542D9A9CE3260ACECFC8EBDDEB0A1E197F402F8571
BB19D4BC3F7046379F133B4EE0CA1E39CB59ECC187E24F80EABB6B4A605E6811
D2588E29A3279F50308204A63573CE1F488F2060559C84B724CD90EE137402DF
65C8ABDB3E09FDBF7AB0DA6864A9961863D1658F6B51F55D5F576F2393DF08BC
113761B1F7F8FDFC055E386F7879DE539CB983D912CD2F87D3CD31FBD152C368
26632DCF1335700B1D03EEF786CAB362089C8BBD1394BDB9D4014B65A3EEDDA2
84C2368AA128FECCB10A041E2CE994D1C4EC29855AE876BA47A7A89369ADB64D
E47924DDC6C20FD7416A7D2E26074EDB5D3656D1E5365AB42C8BC609809464CC
5D5D9E2BA7DCC8E37F0DF79D2A0226691A8E67BE8CDB147A82E0B21E9C4C63EE
0D93939A0F08E42ADB9F4A5B7EE200AB60815AA183F5BD60CD98FBA05B84C034
B2FF4D81A2F2BA3C9FE16EBE41EED244ADAD9A0DE48251CC6CF3825582C426FB
C2E59DFBD6FB1940EF14FF88D51C63555ECC56FE893310BA8A8F7E2BDCC05B6A
BCBB44169B3C5D9513E620699C21418A8F64D91367C0C7B344A79D57406B468E
452147B6FA41E3A702EABB7BBF21FFB90BE317DD13FC39B19797C434DE09ECD6
9EFF8B15BA03DEDF1D96F02A7D02F57B29493CB083CD9D8111434427AB97C244
75FB5BE9329FEE0D42F306C9963509E7A7E3A44ABC15E40316674FFF9F93D493
7D755AFB08240B729D5CD465BDE138BEBFA586C3F12157B11C5A8EF12F23D8CD
48775AF7AEE7A5757B6A5C6B3770F1C1ED822A15EE77BC0DE9F6395195B22F90
A9D6DDCE038A5D14EC1D9A3CECE8D0FCF5781876FF4EEC0E6A25573D1B9F07A4
CE47798A51DCEBC45C5B9FA4B41C03DEE2C13BB3A039E91C316A845782098BA0
5735BD7451DE2F1247FDA2B39F9039AF79111A6DBBB21EAF5B21451D202342A9
E00313211422C5B05FB02F2AFF246D179253993E1B7154111E166407AAA50948
BB817880E68126EEA9E7BFF9F2B99E981244B6F01BDDE5623E568A5D70440BEC
EA996B63B2B382EFD31C5060B649CF38FA7FA0C3970770E85B4695656614449D
A4547BBB06E188B96E3121F96EFC3118475BAAEE96ABE591DA30F895B2117732
CA1A9BB414E4DC6B09AB350DC36917A4F34B55ADE6EC864701A4DF67D4879503
B90A9D67723200506768A9FF3F36A2370E8E45CC6C76C0940FEB284DD76FE516
C49A3F053D90C4F23C2BBDA5DC981236BFAA1929E9F3E311A3280BD6EDB4B349
15CA497A756A937F60D7EF55AE14CE7908454C772CE1255CAA732F5B98917234
2914D15C559414638032503AF31C71E68E0A98F71310A9F6748652CD4DDAC709
5F05A05E338D581672DFAF56F026ABD7978399317F7781AD3E883C035A375E88
3FDFBE7A10F6CD6C2320237AADE17B15254A26293485657FF2DAA7F952D15A91
F7ABF47785CB2397A2500FE44D40BA8851014CB6B9464BC447FE3F6EB7FD2C84
A893919F6B787D4764A5CD4A04C9B0C5C5D32D6B59FCFC6375C920F4134C82C3
9CD381C523CBFDADF76C9EBB33ECB8E5ECDD7EE16BA02F4330047CBB1DCA6ECB
6BB63F8B8181FB5D9FEB317443ECCB50BA0811D35B318F7ACB42F17B98E26304
652C16AA5B1741390361BEB5CA76A1EA22AB9FD33FB3951614971F4E807D61FA
74A905594429A75A6912BEBE7A792B8AD2DBC7AB9BAB81289932DEE3C83A807B
ACDE2E33BDD2C2A4CC89D1F7773AC730A8960BF5FEE16549D5BD1EABA3E0EBD4
ABAAACE5B10917B6D4855A18D41FA58A5EE4335F08A653C767AC090E2059E600
8EC5117C3C2DE2AE524FF0819F60B5295C84EEBEB2534F12F7542EE2A505D911
30BAD103908AB343AB751B985CACE42E480B6F75E60E39728B24FCD50FB7207E
E59FA0A71A55A41F6BF9D14E2AA6879F150851B4F51ADCD69AFCA7F7B615E2C8
745BC3365566C6B54911643224AF213CCA5E6573980CD5E23813924E37F2F2AF
E14E50542C9443681448820A6954C610CF2854DE523FAE36F498479ACE57E54F
F98C3BD0D17E2509F1303A4C0BC47CB9AC5C11B453887A513B355096B5B599DF
32D3F521F18C3E6C10FC2BC34A3360814D850A497F51FA1DB650975E5DFE1710
D106C601BAFDDE9997636DDDD488ECA5D37F37A41FB5BE261310716181F1013F
61F6F77DCB37BAB83F734432C229C245C53A069B310C647662A08C54ADFEF3A2
E9A81DAC4E788CC99999B3B87F8CA7B8991919DEC6C8E95AD38BF094EDEE92B5
6ED0A0C55B96DBBB5C3769F679BFBE1884E027DEE3A6B74476145D342834759C
F153D6B5F69448250B986AD77D4CEEDEDF55A5C11B4575E2C1C48A89E6F32E76
1E317391282E3E790D4C0581A7BBDFD6D5938DD2970E7BDE28BA0B9D1CFE584A
D64CBC0865792DB9DABAB96850F7B99E4DC622A486352560BF16295560B0BBCA
5EF0FEC4A841219A9EBD277C1997A1E788DC4FC2989ECA54B6D0C2F574734A40
47FCB5987694E791ED75B6B51DA483BAAFF083C2164BFF0B2571C43636B72ACA
C101DC6A502B85F278C0C3CB5EBE97EFC90135B84607F72829C6D6D0BF8A107D
CBE06EC7749A24D0E4DBC12A92F6CA32E53E8656E6F98D04B69A89092AB83AEF
6555D2E9887CBE8952004330C00C8B0E231F3E7676BA56349B98E17AB9706BA2
EC81C8313FB008CB44B245DDCAC898F03509B2D48F8E9DEEA12F9AFF54D74005
B8A40678DD948C7381240547CE954CF342CF9C3527C61FCE11AD2088A6FD24F5
6D66CA67720401C35238DC29A7BA17E5B0FFC092EAB5071F6F86D8314F056299
A1683CF59F3C54D9326BAE17E4249D4D3DE7190D52CCC17BDA3DDA12AB064C6F
535395621AD36FCC6468FB0FCA507F746B01A7BDD871B84FCC82032FB0D071CC
71F572F2E9CF895B3FB57FABCDC7054B7F71ECF2A98E711BEFEB07E1AD384C0C
D13D01827F91869D90A87A51FD2928310FF6E056EFF26F2260FBAC6BF532DD2E
95764DA08108C82F6E459FE7CB0853933FCABDFA8A06DB3BC59AE431B46A4894
F292080A8744EBAAD009107CA77D0BFEAD09C878BD6FF04BACD1097003D55E8B
4F60FF3BD523C5D7750599352A9647E79CF5A00E233E6D42348265C6E32E9349
83067DADD4E017C9661EBF15E3231934609253A7AA4E89150CE506E8E9739BF8
A3F6E3D8D9E3E1A6A512567C0CD230D940297B3BC38923FE06AA669E76F1EA09
EAFE23C33B5641250EFBD65F9BE84E6E3C5517D635A318D4B615C9EE1EDD3CD8
B7DA458809BFEADBB07857A00DAE1584E7364483B0EFB722295A7CED8DF779B0
91DC3D6CDB29D5DA79CB5A7955AD47E53ABE4C4601188217FC7814552B35A603
4085878F4828C6663A9A108C87B7ADD52E51109C24DFE34C48D775783B7DD9DF
11FA74E049CE83CBC682549332FB1B3D8B85CC4CD8887AA0EC78503F8DA939C7
4D818F3F2ED7BB44D8D6A423D86F9030C88DBF5FECC9D7175103FB1B2C993CE2
0136BC0B95F8C576E36E4472E4566FCE1F98A646C54F0B722EFC70126DF2525B
2F1CB14A28ECC49BADC1B5B71BC0AE6D41204DA812F8A3C7CB8F7066042BFEB6
B83C75BAF4C974E4F9A94894981F879677611D9E65B12E78BDA58EE4FA2AE01D
1A9D668CA7626289C5265AD31FBF9118F911EA7BEB3825C8763999732F7412E1
92604A95466CD6FA38C9377352E4C9796D2B32EAC97EE92A13935C5C4AE22EEA
BF0E8A5D07EFCFC13FF0558E649E03081253923B89A5539D175F42E68082B34B
D257FC1FCE4A2567CB19E79C7D6C94567AD1D9AD1BE33734E396A4A767F4BE3D
B7447E08C7F9A5C841EDEE9B343076D6B5403102218523E523D37C3AC1AC3158
6C93E8D4CEFC2AF386F35A69F36FB5D13E9F9406F1CF0D5642BD17E37202CA94
49F7517E9FE4EA99CB5E253D6296E645B1A00CE4D660855930BAEC992048E152
773062CD8D684F586A628688E5A9A601D576107A6CABFDB9B36B29DA9571DB26
F5D586CE4757AD89945AA99B2D4062665BDA5950807BE4371CE5E83A3CC6E579
5C00ECF000DB31ED9FC0EA7D91895855405C6F11960FF2E32FDD94DFABAB639D
50918181F7B2A0DC77544B7C71B4605E191323B5767ECE874B8DDEE02115A2D3
824271FAAD8387E1B605E50399006B39386DB2A15A601E131308365D003B77E5
00AF2084781141FEAD9510443271557AA59DFC799A380921F071160124B68FC4
39F0DD7CFF4250587D714BC4B5EF51C77D33147882FAC7BA1CF20B402BAB8CCC
6A36B1B6C8F05671EE5980CDEF52BC7B30EE78EEF02E6BF183E68EC5A49FF0D9
5F28D309A3394F46016168E9F2E8FBF19AD2FB427B79DB96F1570797A3CC9D67
F0C8FEA36DB4FDA166C0DAF118C1104F4EA1248C25022FFA07AC5775E4435387
0A6EEB2DD4AF4E85C07C8DC8DE5DE16A12514128A9121FDC810F67C43C11120E
2061273EB1F52114F95F2C7ADDE37E54066A7C860EE7F58064412E650965CB6E
53C2B76D1B4F952493536B007EF895FE50EF60170AC857D0A6299DB5390FC18A
FCCB779EA2EC0BA316F6ACC0ADA316B7FC7FFBEA5BF4332920B1D45680AD970A
7040CCD944785F1D9215EB1703C1EEFEE215AACA0B571C4BF92337E4C4546527
85828A1454789B0E0DDB16207447EAAD14453D0976C9A84F11B2F1E8E3FA6EE5
567102D9964F2BDEDD490E55A8D6775C8355FDDC920D8EA8FAA4F2E8AE0B6BF6
73046D39CBA58275F2B7138F1D8D65B168EB1822156C3A560F9A51F69157E181
C580B32ED7CD21476E68ECA4C6142CB1BEE3765B0895AC40AA6B3AFF111C91E3
D6CD55E2E9920B58670DCB204E4C14FBE09C640F584C0FF5F503E2ED5952645B
8AADFD91F660D8D1E2AB52AF1D9996BB92902FE1B61FD80442BA3EBEDC0D6289
2DCBE47B603372089B7EFA8540F8CA7C02EF156C546D045551026DCDD9D63680
497A2D331F1A4E35A82213606F5CEB62F6327BBA2D81591BB9FAEC0F8BB6D9BF
2D2D3D1E54BC87B4C20B513958C332E824A3A9B036C1599325A51119CC941844
0411F2130EFDAA1937F2B1241AE6994A05F44894EE12B1DC62EFDC9BB612B8CF
7F3AA72BFAD178DC6A0B53E6C06E715CF2207A7AB14650E08EE815ADADED1401
1642A3538D7DDA1258A888FC01EF0360F3B04D39D858BCBDCFF31EF54716B6B8
629A57629F7781631C3BD47B27D98C9596DF4048C6345382D7645C61343AF5AA
C1A65D5707D3472AF029747BBAB7EB0286B60E1B583777FE15BE8ABDCD1B201D
7292603F9C39C60FD639CE8BC0DB6649D759D51E25471FCFE7EDB300F5A4FD41
FAE237D9DFA13E597D6FEAF4528B226E6FC9E49409608FA81D467E1CA399FAFD
330AF996057ED4D749590FC8A71088FF1E46ABC12AC4FAD41AAED08EDE1D621A
AC01331400EBB086BCD9EC3A082B8C664AEE402CBCB62D528D288E2EED99D2F2
14BFB47B17601CC82D094E8515AB402669AC4F083D52C9DAECB8BEAD05B4BBEC
B9020F26D5CFA237DE1E8F3FCF8A7E7E9720C6D4B0CFEA97DE3F707B04136ABF
7FF58BC960E5CE560F2E66ED3FB2BC422A28A6D8531D5CD3413BDCB26F4487C5
711A6515BF59614528C12FC7414F9FDBE990B7B9A5FC37E8E88B10513BB77938
5FCADF7BF0EC9C2E6ACC7D110D0395D746FB5D2D10B425043FC82EA2D2719434
19046801CA5ED262A6EADD0B9E3AE1244A7190C69EDFB4F394EB2880EE18E97E
C104C0BD8534AE8E9641E3BEABD40C97473F881EB27B563088D6C773E29769CB
85C11E199D69D9BA51F8DAF820EDFC464A316699358569017DE4D68A975248B5
811C48C4156A199A0E55E8B133F61919C56BB1C9886BABA72FEBA69A7A5A84FC
3D37E9D93D963D15CBAC988F1D20B94CB158DA3CC0B36114E838B8C6CA342A3B
F9687608C1985F68DA5564C918CD533B1BA188F0145A7908A796E728930AD117
70461577305C8290C5E184E15DA0052B3F786309727FE244E07DDC1E06B25588
CC8073478F9E96E97225FC3EB7C717B13FD2A8A6BEE0764F1FE6E531CA4CBB8A
FFC5256F403EB583D185B297DD3FD9FDAAC2B0DBCA07EFBC200FC8656A1CD716
49D7077B1AF188BAF6D6F38872D9E106962AD9293F393D56F2B63263C723A059
757AA0F6B713E8F6BB4D89D34DF0EC4CCCFF9DD97B512503B2FAD38FDAE94E64
B33DE8A713D16A4D3446E8695AF08D944D839109B213ED78997772AEB4A3533A
9060723140B28CA0FE8EE2BDCC7259FEAF92032B36A335E82507D943D224B646
381900DBDB097111FC2A1E1D067EB3424F3703AC5F5CCCAD916583E41F81B6A0
69CF7D81069B4F1243769A04F4B87C4278195EB99DD19390A0979B20CB80730D
EAFB003DD9622FE304503F391B13F2A952E98A8ABF84BF6002092C15A2C1D510
D3A2125DEFCFD413AF0C0CC75BA60BE66B8258E2B69AA25186AA3A9B026F5F9A
EAEF70B3EF96E656D5D5F3FB5C365A9FFEC62B659E901E19E19EAC427EAFFD55
34312E2BAB77865050F5DB8284BD7071E4B193CB02D7F012DC39015DCAEE962B
F64F7BB804E5FAC1CE4B04F031780A716124C997E2CAB23C26BA97A5FA0233B1
1418520E6A9DE68A1AC8363B4B099DFEAE78EF86C0E11FBF5A4FFF883109EF7E
2D9C7B71DAA1C3D829029FF86F4ADE55A1CE106012CD056157C184391F40975A
ACB4476F52EEA425556648C47ACE3AE4296A7B56CC41BD57B88FF87B04C17F3E
62E2FC0957D82A1E36609612CEA7EE5883272D1815054EE0CC226B85154CAF86
E8DA1862B7BCC4A5BC2EF89A73A1E8085155FB418B0ACCFA1A5FCD79CC7F3E73
D42A19E1491ED3BC16D02291A5E89F38F8E7AB7A3ED92680238D6363132AB8B9
4E553B7F0EEEEFB0F137335B8207AC27B8C4DA17F75972272BF39F4F2729DCAB
434AAC881B1AF55C0113B847A9A91290BD8009A50FDFCDA311AF65327FD54AA9
C0AE6293A64ED967281EEF09A1FA6DEE48797522DD3F171090048DCDCC5E548C
6C91FE0492C5AF51181F83FA6AE9D2EC05D1A881BB3E3602CF67A906E7D1341B
9AA2D1633D1B6B8086CB86BB314D738E461FD9FB68D049A2D0222EF19B90C5BC
3E403A8E6E31A474FC620BAD720B0120D934D19AA57AF55CF983E671620A1A95
86A4EBDCECD04F3D8D0434E8AC95578612A22868C68BF5CC6EEA1F3A5DAECFFA
06EBCC9EEDB4D0BA9362C2DDD7256FD0882F3123C1EAD8964107597D26D62C2C
5B25D304A50D48F009A2FB21838F48FB8F7B685C6C450DE38567BD8C7C94544C
2B3E22E71ADE432ACCD156FA2775BF94C81F5D217D24AA6FF0B434E3B9DA52A5
50D150DD13E00751DA00D61616614FEFEDDBA11E168C9B41A56F9E26D4048554
4FBF517C4F2BCEDE8BF2994A13CB7A72846AF458AF9DB065E2144F9057A5F46A
8A5B64A68481602395E73FD8F5E3E68B7D7170CEB1641AE25415A77D742BB1EB
B74EF3426B4CAF262F52549C1D148FC9AE4D76D3D9391D64618DD6CA2D7A196C
E43DE5910B416CB51415BDC071C2817E389DF04EEFA20526CF42A6E54EBA914C
E307F2E9050052B37908F0F5DD7797D516892239F1A3C8D08F90CBCD4CB948FF
97E553995D6E19BAC69F7B98D5397744239D7CF6182D0D719A81071917E26A0E
4038D870BFD99C6E22B35812A7F84B29AD03EF92A37B0780D1E4916E0B9EEF1C
CA6910E8CCD4566A555B5B70B9619E9E359E815E91296A98B677D5EB7C538B5C
50C952CF01B71B3252FF64B0B8F2426A0530D7FA043A3929EA79A9A038C5CE80
D1EF3455701D11F0D4BE40FF45A4C0500DF3DA9D7F5EFF014F3CC2D1988154C8
AA4DF5FAADA468EBAF272036E094BB20C293E4119D7D625A5D7A35263DF4DD56
900D3C6004D6FCF42FC39D56140730EFD8BEEA6C9AD5632A6C2302306FB34251
266E77FC5C2E02A8BA98D65B9CC913E36D67D686EDC37C1FFCCF84951A159D7A
1CED85D9CD7426A04A64F8189705AB05FFDB05AC8301C76E2253A1A1086BCA92
77E31A17AAED73E55F1D423BAB218CF905C7B9164B4F58F5CE2C29D2955571E4
111DD37B7DCE9F6FAF608095A33006CFE7000F807CE62E00E7E3FFC8B67A9448
5AC3C097EA2DCB15A0481405925D7A141B8ACC646893EE2145122487AA2AE56D
9F39FBD1B1B7BCDFBDA3B7D105D9E385CC7F6377F56694A9E5B11F7CA8C9C6E4
7268A8BCDEED4F434CDB2EC85838DFB0A3520C15F97268F3DD59A6491DE5D08D
231CBF8F69A81DF9680A589ADC310B0FCF0CEFC422F3C85676A0892A68418217
A3B4298104617C22744A5AE93451F887877EB390D3E4B509DD2CEE601F2A0CFC
DB122B8F4DC949BCAC76D5C31279683CC49ACE6BB0FE643FECAF6966C99D7D08
9508BA1C430154962DB0C3D175B7F27E3304518378101B3B8F2626A3B20CB1A2
28B94CBAC92B5D507626C1FA5C91F28A9CABE2BB43D98A0F602518DA30ABD66D
DA71309F6A0813BC31F8DBC453138620572EA85FDF0C1881D21EDE382E2AC86C
9AF6E00CF5052AC0D3772449DC420FE04154AEFF1AA43D802B06C7E901F66197
DA90C4BD6DD2B1985649028EA78265F3D5C943C9EA939AB7BEF2E2CD8038CEC4
2E8C31D8BB0E22ACBE695381666714D536D9EDE1BC0A7BBE902B4A7211F04367
2A181694F3D6CE047654392DCA5F097624BCC1D7982DCC1EFF76C1DA88E86418
D9BD7A1D907B1BCBB223D67EC1D60BE56DB009DBBB5A68D2DC3E2358CF67388B
A2BFA69A093C064F5AAC38AF3118CB3F34D5CFD2550A187FC1D364D5DDAF7633
D6B045A282C6F7E2A0EFF2B82A41650AFE6052F4E371631AD47EC43A32800429
357948B58E34AF27959F18D602404FD5E3DC9884FE637AA62EE21AAB9A66377B
24A764688DD454C5CCBE9D60C51DB62EAFF8C6AC46EC107604A6B152CC805FA6
97FC1827EC16B562C6310A69A56152D82FE52C9FE7FF965C5BC61CA664F1F326
7309E6834EB73AEA6F504BCC1D82CFE057A469A2BCE8B5B8E79D87EF6A3C3F56
E56F67C611FFCAFA1F128626300AF16B79FFBA9BB393B2B84000A4C51C867C32
8F334214B29ABAB4B7CD821B4C366F8AF3D11CA6B5329E9DBF611DBEA05091BF
A5CA6E8AAD92CB91F71E673538299AA4B14E52C85E80834197F2F64989B912F0
964E8B372351699BFB3F743E1DD4B051220F90708D775B7BD4CF78275E970C6E
EA409AEA47507DE9CEE799D99F20CD73DB62B91A0A2885A0871FE61DE7824A83
7113EEC77FF7D9285A581CB0763E5A6946F102D168784D7E42620BFFAB076A7D
3547AB66C48C07D42E8C15A7CFB706AD0191B5DC3B6B5B6C19032B661CA35820
71AF0C04DA332DE949D3C50C906E04AF775650BC60330D4FEE7A6825DFA3DB4E
85E395F59B5286CB9E23021CDCB26CEA6806A53B0B802B402958D8EF34BAB968
52AA882141A6B2341E7D9E18354D9B1A677CAACCBC5FB4373136DB2666607A34
3157B3683101D8658DA811A3BB548177D0400C41A9313A09879F0694D40A42B6
813082F3176367257376A3CCF6AC062851DE51064D028D65813928786B871BAB
0388D9091FB23F52A0034A5E488CB9DFC5349E1396E5C0D20818C6EF82888307
694361E544F9B5CD9E823608FB1335C9D1639A4F453F9DEE893A512210D7AA20
DEC657774923C705A4D34C11CBCD12FC7018E02AADC6CAE148F74828C7A7B612
04FC3C6295D4C537340F4AFE777FDDEF6ED52B6CD0ACB90DBF9D14E0E896A938
8D1E94F1692710114F9F31637ABCB4770FA373A7C3917D12D2F981B8E46D20E8
C9843E9BA4AB96B9EB0E27190E21BC1E297B58083CE4B969DA942C22A0084460
77894D27E08320B8CD150CB066DECCB5DB48818174E3E2901741D427648A50B4
92085A1CACAB0D5DD87742C31257AE26CE67DE1A640E75E0077A33346101B22E
7F3B2CA88757F2C3A681185B8A8B39AF4247C96CAD8102BF82ED28F4DC345FD9
95FBABF4BE6A85726BA0B3AB508EE4D15259C4A3B2FE00277B4FA3C1D94436C2
5A8A933AD3F0D8A8E3CD8B9D776B19010F81B05FFD193AB37660396B981ACE9E
12B0511014C8FC56F21B5BD7E1CE89AE79967C94D873BAB7DE3568B6C95BEB40
613E049BF0F71C7AC69653A14ECABD18DA62D79A33BAD70C06FA7D4C32E1B926
D7CB3CD2355278269DDD95619A9BCA5035F42325B756DD5DA635EDF04AB3571A
FC6D3F7B3645D1B1B9AF02FBB19D36625CD8438178B842A8B57015C561DD4A75
63AC71843412E6ED00421DAE88EBCCDBA11B5D00F7AC7F451382FF9B5D5885D6
15925518B4D50986470840EC3E11500405CCE21A94F765F6D8B1445284F0C754
D08595EBC27DACE713E7D4C0760F91B9E9CDAA2394EFC908EF57598BF11A93F1
A899FAAE7BDC50FD5E560206FA52AA0B0829F1E1147C01B352411AD1D7B69AEC
40CD96810532681B0E928DADDC22ABF8FE0CD660FF580F675DDD738AA41EE268
7AB9324D05BDA82FC7D283F5563CA2730197A216C634D86B0AFF9AF7ECAAC6EB
5F41421802E685E44F8CF7D3F069A678FDEC4DEAFEE468ABD0ECD5F226FB5F6D
3A0F7D4D942F00F2CE3E434B3D725A389F0D999508E92E38B1A20C5877F99D9D
578AD7A40995FE95F9BDD5A3F182213F3D20B5E6C79C3BAFB33AA278B84A06E8
D38C28E608FEE0EDE95714C70F77EEB6089EAD06D1C78513488E95D81354CE24
66CB7F146EB7B21796C5BD0AC1606AD2C1CBA2EFD1F73F691D61C859F9E6B1A7
99413A6E98C2ABAFCAC3E3C3B6977117F746F2080F38ACE8AC362F74AD28FB46
5BA08A11C077E1009CF33E421D527E12C6ACAE696F7EDEA967490B4E0D3DD859
2CFD87B848889A2ECAFFCD5DEC3763E7221BF8CBEA731A55FB2E0187C03E50B0
93501B40C4F0739D3AA5CD6C6384CE603C59FED466486CF9DC104CC703D0FBC0
29DC59F3EE15E2CCBBA7CD7B2CACA1AF50BC2E14F174D5C2904AB851794FA29D
671BFC634231485CA3D527E29C06799743B1504BDCF4EF656C0B749C7BF4C3C1
3A8B33070050D3F270DB58C9BE8BC850E2FFCFE857F2FF15B4CA5C1295FBE29B
32C00FC1066D7A56FCA25683B6E6F0AE28656ABCA88D6FC160F2A78F3AC6952B
F8B815F9AE9CD33356C49C9B82FF20A8B9B18F85D724A71802BD62652BB34060
F8C80C2A10AB928E46070BB9B563037FC18E9A8D59AA21BE519BD37DC42700B4
F2828D2B9DDFC94B26AD0C1D1E840633EE373C0B0391B8DB451D8321FAEDD0C9
6A736A0924AAAA3F467A18D12856CBB18FAA17A8213EB57D27DE125BE237CACB
1CD6700B00CB76118AE370D55138ACEE9312240F9F354638A22CC8ACFE41CE43
74E84C8961FEEE4163370ED9C3E13C8BC9AC7878BE15F5759F0D6535655E0A88
7AE02AA954E3316EACA48AA107B3DF8204E0F74E071D21362C7CE37CC3FECC00
7C21F4CB4F155340C29EB63D0A0FE265FE14CA71F5167C6FE49C68E5412B1357
262BAA788BCCC7928807C5619DC256738C4ACE82C85D09B442AA88717C4EBBB8
44449AF836778BD9482471A9E1A5F14C9BAF4B67F312067F5628BEE3E3CF86B2
64460765019447F565C0AD3A80005EC5A826BFBDDC79BBC6DBB3D04ACA81C90E
4021C5FBD346395FC617917E119901472C950F34334C7439E4896ECE37E51108
7F4A9F7B42611C99B14C9B1F28F81E47386908A35B05EFF75A6000C46E5C7059
3D02911CB85C74C99AF34F47084828717B06C509BD2B688C43B7ED64959BEC9E
E13CD7405FA5593721AEBDA2AB46E84FA6284894D167F825B30EB7B506778AEF
5ADACFEE7E6A2B56E559D56F1A34CA4D21E6A017CD4C2A91C82032F27349B248
29EE16AB660222999B52D792718F0FCBC1D82CE81911014081177A7D8888E465
A955F6AF735DBFFF521CBA4A2ABE75F8D665DE41221D1C9BC42C3826670CD99E
A05B8A41F2A8EE19FD235B2CB312259C7CF09F1F787C18174D0A3D683F44714D
DF21830EAD3B10D5C6C51B67BB1F09C969D15FB340AE01CA51B77006E9D9464C
123C384BBCD5CFB66140769936FDEF12B1AB4522C394F882295DBE49130BD4D0
AC39F5ED411C0EE317CFF6473CC8D3C31BC194A62D497F9502C5C4AD3433EC17
BA03
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AEA288B48E6A0693F75308FF5FF6D4704AA8FE5B223358DD415BA8A
C5F3427A5C26A5E116ABE29F2FB420E659B6C973FC0C06639826AD42417C0853
B11AD8AC3B02DCDDF09F78A9FCA629741BF7D0C2D1AABA32751AE8BFFF7E19D1
298AF207936C341299F1F33237F51AF6517D70DA17A956E95A5E509A923AD9A8
CA6882E41B7B81720692C0C1E5535F449A4015E77D7E7874546E510FA855B462
DB619CEEFCFBBD9C58F95EC5B23D00606B9B54C1A9A701106EDA16F806EB145D
CDB8C719FD1F08BFE2574B6DDD849D1195780D0963268EE128713FCFE62A650E
7DE11691AC39E376C0584DDB6573D0A19583746C276CBE01A3BCE7DD008231A5
E2D7D8C0DBA1A21270D5371C778EF28B8AB7D527467018996A06DBA25E94206D
1CF02A4376F7B349464105259D974CC21621515ED7B877B18E569BFF97723E3F
C1DE3CD89AF13E7F5F4F40564813DA3F942771D8FBC6B7B2C0EA600B2FCE8374
9317270A2080FC1C58098A1047F680D7E3D6EBE03C4633F6D933BD4F7E0DA41E
B242F97EF626992941DBB0791CD812A0117840DB1DCF6E22BE6B2707A96E47E6
26C8CB89CF5F7A75B7BEAB55637550CA0156DA5D294306A3CB1940DC8999DB19
CAEF754CF4812B4923CC481154D1215F3AE56CF370A6BBA611EF6638ACEF9C96
56FDAB1038910907176F22AF939FCA42276CA50C1ADB32E9D9A181035647C30D
A324C97633BEA474B90CDC6074C78BB5AE37956E437C350BF9961B6A74551418
BC88FA0C5EF772
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (prba_pstricks.dvi)
@start /Fa 206[42 49[{ T1Encoding ReEncodeFont }1 83.022
/SFRM1000 rf /Fb 130[44 1[44 44 44 44 44 44 44 44 44
44 44 44 44 44 44 44 44 1[44 44 44 44 44 44 44 44 44
3[44 44 44 10[44 1[44 1[44 2[44 1[44 44 2[44 44 44 2[44
44 4[44 2[44 44 1[44 44 44 1[44 44 44 2[44 44 2[44 44
36[{ T1Encoding ReEncodeFont }54 83.022 /SFTT1000 rf
/Fc 134[41 47 120[{}2 83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
515 440 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 515 440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 515 440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 515
440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 515 440 a 1820 1671 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  
/showOrigin true def 142.2638  0 -142.2638  0 ArrowA CP 4 2 roll ArrowB
2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin 0  setlinecap
stroke  stroke grestore /yStart exch def /xStart exch def 0 dup 2 mod
0 eq false and exch 2 lt true and or { /viceversa -142.2638  142.2638
 gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline -14.25134
 def /maxTickline 148.21394  def /dT 1864680 abs 65536 div viceversa
{ neg } if def /DT 1 abs viceversa { neg } if def /subTNo 1 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 4.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart 1.5 2.  CLW mul add 1.4  mul viceversa { sub epsilon
add }{ add epsilon sub } ifelse } def /MaxValue { xEnd 1.5 2.  CLW
mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add } ifelse
} def /logLines { false } def /LSstroke {  0  setlinejoin 0  setlinecap
stroke stroke} def /subLSstroke {  0  setlinejoin 0  setlinecap stroke
stroke} def 0 dT MaxValue 1 add { /cntTick exch def logLines { gsave
1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch
dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45276  mul
cntTick add def x abs MaxValue abs le { false { x minTickline  moveto
x maxTickline  lineto } { x tickstart STsize mul  moveto x tickend
STsize mul  lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul  moveto cntsubTick
maxTickline STsize mul  lineto } { cntsubTick tickstart STsize mul
 moveto cntsubTick tickend STsize mul  lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
 moveto cntTick maxTickline  lineto } { cntTick tickstart  moveto cntTick
tickend  lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45276  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2
div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 148.21394 0.0 -14.25134   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2
div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 142.2638 0.0 -142.2638 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  
/showOrigin true def 0 148.21394  0 -14.25134  ArrowA CP 4 2 roll ArrowB
2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin 0  setlinecap
stroke  stroke grestore /yStart exch def /xStart exch def 0 dup 2 mod
0 eq true and exch 2 lt false and or { /viceversa -14.25134  148.21394
 gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline -142.2638
 def /maxTickline 142.2638  def /dT 1867953 abs 65536 div viceversa
{ neg } if def /DT 1 abs viceversa { neg } if def /subTNo 1 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 4.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart 1.5 2.  CLW mul add 1.4  mul viceversa { sub epsilon
add }{ add epsilon sub } ifelse } def /MaxValue { yEnd 1.5 2.  CLW
mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add } ifelse
} def /logLines { false } def /LSstroke {  0  setlinejoin 0  setlinecap
stroke  stroke} def /subLSstroke {  0  setlinejoin 0  setlinecap stroke
 stroke} def 0 dT MaxValue 1 add { /cntTick exch def logLines { gsave
1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch
dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.5027  mul
cntTick add def x abs MaxValue abs le { false { x minTickline exch
moveto x maxTickline exch lineto } { x tickstart STsize mul exch moveto
x tickend STsize mul exch lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul exch
moveto cntsubTick maxTickline STsize mul exch lineto } { cntsubTick
tickstart STsize mul exch moveto cntsubTick tickend STsize mul exch
lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave false { cntTick minTickline exch moveto cntTick maxTickline
exch lineto } { cntTick tickstart exch moveto cntTick tickend exch
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.5027  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2
div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 0.0 148.21394 0.0 -14.25134   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED
{ 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a neg
rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h a sub
moveto   EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h ED mul
/a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg
a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0
h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add
dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave
w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2
div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg
h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def  [ 142.2638 0.0 -142.2638 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1820 1671 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1820 1671 a 1820
1671 a
tx@Dict begin { 142.2638 0.0 } PutCoor PutBegin  end
 1820 1671 a 1820 1671 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 0.  Uput UUput } PutCoor PutBegin
 end
 1820 1671 a 1796 1688
a Fc(x)1820 1671 y
tx@Dict begin  PutEnd  end
 1820 1671 a 1820 1671 a
tx@Dict begin  PutEnd  end
 1820 1671
a 1820 1671 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1820 1671 a 1820 1671 a
tx@Dict begin { 0.0 148.21394 } PutCoor PutBegin  end
 1820 1671 a 1820
1671 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 90.  Uput UUput } PutCoor
PutBegin  end
 1820 1671 a 1798 1681 a Fc(y)1820 1671 y
tx@Dict begin  PutEnd  end
 1820
1671 a 1820 1671 a
tx@Dict begin  PutEnd  end
 1820 1671 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5 def /x1 5 def /dx x1 x sub 999
div def /F@pstplot { x dup mul -1 mul 25 add sqrt } def /xy { x 28.45276
mul F@pstplot 28.5027 mul } def  /ps@Exit false def xy moveto  999
1 sub { /x x dx add def xy  dup 1.e30 28.5027 mul gt { moveto } { dup
-1.e30 28.5027 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit {
exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.5027 mul
gt { moveto } { dup -1.e30 28.5027 mul lt { moveto } { L } ifelse }
ifelse  } if  gsave 0.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5 def /x1 5 def /dx x1 x sub
999 div def /F@pstplot { x 2 sub dup mul 8 div 1 add } def /xy { x
28.45276 mul F@pstplot 28.5027 mul } def  /ps@Exit false def xy moveto
 999 1 sub { /x x dx add def xy  dup 1.e30 28.5027 mul gt { moveto
} { dup -1.e30 28.5027 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.5027 mul
gt { moveto } { dup -1.e30 28.5027 mul lt { moveto } { L } ifelse }
ifelse  } if  gsave 0.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1820
1671 a
tx@Dict begin  tx@NodeDict begin { tx@EcldDict begin -3 { x 2 sub dup
mul 8 div 1 add } { x dup mul -1 mul 25 add sqrt } NewtonSolving pop
2 copy end /A.Y exch def /A.X exch def   28.5027 mul exch 28.45276
mul exch  } false /N@A 10 {InitPnode } /NodeScale {} def NewNode end
 end
 1820 1671 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  tx@NodeDict begin tx@NodeDict /N@A known { /N@A load
GetCenter } { 0 0 } ifelse end Dot end
 
@endspecial
1820 1671 a
tx@Dict begin  tx@NodeDict begin { tx@EcldDict begin 4 { x 2 sub dup
mul 8 div 1 add } { x dup mul -1 mul 25 add sqrt } NewtonSolving pop
2 copy end /B.Y exch def /B.X exch def   28.5027 mul exch 28.45276
mul exch  } false /N@B 10 {InitPnode } /NodeScale {} def NewNode end
 end
 1820 1671 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray    /DS 2.0 2. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto gsave 1.  1.  scale (b) show grestore } bind def   1.
.setopacityalpha  tx@NodeDict begin tx@NodeDict /N@B known { /N@B load
GetCenter } { 0 0 } ifelse end Dot end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 0  setgray    tx@NodeDict begin
/N@A load GetCenter end 28.5027 div /A.y exch def 28.45276 div /A.x
exch def   tx@NodeDict begin /N@B load GetCenter end 28.5027 div /B.y
exch def 28.45276 div /B.x exch def    0.5 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def /ArrowInside
{ } def    /x A.x def /x1 B.x def /dx x1 x sub 999 div def /F@pstplot
{ x dup mul -1 mul 25 add sqrt } def /xy { x 28.45276 mul F@pstplot
28.5027 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  999 1 sub { /x x dx add def xy  dup 1.e30 28.5027 mul gt { moveto
} { dup -1.e30 28.5027 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.5027 mul
gt { moveto } { dup -1.e30 28.5027 mul lt { moveto } { L } ifelse }
ifelse  } if   0.5 SLW 0  setgray  /ArrowA { /lineto load stopped {
moveto } if } def /ArrowB { } def /ArrowInside { } def    /x B.x def
/x1 A.x def /dx x1 x sub 999 div def /F@pstplot { x 2 sub dup mul 8
div 1 add } def /xy { x 28.45276 mul F@pstplot 28.5027 mul } def  /ps@Exit
false def xy /lineto load stopped { moveto } if  999 1 sub { /x x dx
add def xy  dup 1.e30 28.5027 mul gt { moveto } { dup -1.e30 28.5027
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.5027 mul gt { moveto } { dup
-1.e30 28.5027 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
90 rotate  /clipType { clip } def 45. rotate 0.8 SLW 0 0 1  setrgbcolor
4.0 0.0 0.0 LineFill  grestore end
 
@endspecial 0 TeXcolorgray
0 TeXcolorgray 515 2071 a Fb(\\usepackage{pst)o(-eu)o(cl)o(,p)o(str)o
(ic)o(ks)o(-ad)o(d})515 2370 y(\\psset{xAxisLab)o(el=)o($x)o($,)o(yAx)o
(is)o(La)o(bel)o(=$)o(y$)o(,Po)o(in)o(tNa)o(me)o(=n)o(one)o(,p)o(lo)o
(tpo)o(in)o(ts)o(=10)o(00)o(}\045)515 2470 y(\\def\\F{x)40
b(2)j(mul)f(sqrt}\045)515 2569 y(\\def\\f{x)e(2)j(sub)f(dup)h(mul)f(8)h
(div)f(1)i(add})515 2768 y(\\begin{psgraph})o([ti)o(ck)o(si)o(ze=)o(0,)
o(ar)o(row)o(sc)o(al)o(e=1)o(.5)o(,la)o(be)o(ls)o(=no)o(ne)o(,l)o(ine)o
(wi)o(dt)o(h=0)o(.5)o(pt)o(]{-)o(>})o(\045)645 2868 y
(\(0,0\)\(-0.1,-0,1\)\()o(8,)o(5\){)o(0.)o(5\\)o(lin)o(ew)o(id)o(th})o
({0)o(.5\\)o(li)o(ne)o(wid)o(th)o(}\045)602 2968 y(\\psplot{0}{8}{\\F)o
(})37 b(\\psplot{0}{8}{\\f)o(}\045)515 3067 y(\045)515
3167 y(\\pstInterFF{\\F})o({\\f)o(}{)o(1})o({A})o(\045)515
3267 y(\\pstInterFF{\\F})o({\\f)o(}{)o(8})o({B})o(\045)515
3366 y(\045)515 3466 y(\\pscustom[lines)o(tyl)o(e=)o(no)o(ne,)o(fi)o
(ll)o(sty)o(le)o(=h)o(lin)o(es)o(,ha)o(tc)o(hs)o(ep=)o(4p)o(t,)o(hat)o
(ch)o(co)o(lor)o(=b)o(lu)o(e]{)o(\045)602 3566 y(\\code{)k
(\\psGetNodeCenter)o({A)o(})c(\\psGetNodeCenter{)o(B})g(})602
3665 y(\\psplot{A.x}{B.x)o(}{)o(\\F)o(})h(\\psplot{B.x}{A.)o(x})o({\\f)
o(})515 3765 y(})515 3864 y(\\end{psgraph})p 0 TeXcolorgray
1926 5255 a Fa(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
